interface Activity {
  description: String
  id: ID!
  missingInfo: [String!]!
  name: String!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  slug: String!
  type: ActivityType!
}

input ActivityAttributes {
  attachedActivityId: ID
  description: String
  name: String
  picture: Upload
  profileIds: [ID!]
  slug: String
  suitability: String
}

type ActivityPicture {
  blurhash: String!
  id: ID!

  """
  1920x1080
  """
  large: String!

  """
  1280x720
  """
  medium: String!

  """
  480x270
  """
  small: String!

  """
  48x27
  """
  tiny: String!
}

type ActivityResult implements SearchResult {
  activity: Activity!
  description: String
  id: ID!
  title: String!
  url: String!
}

enum ActivityType {
  """
  Show
  """
  Show

  """
  SocialEvent
  """
  SocialEvent

  """
  Workshop
  """
  Workshop
}

"""
Autogenerated return type of AddPreference.
"""
type AddPreferencePayload {
  preference: Preference!
}

type BooleanSetting implements Setting {
  description: String!
  id: String!
  value: Boolean!
}

type Cart {
  discount: Money!
  id: ID!
  outstanding: Money!
  paid: Money!
  total: Money!
  value: Money!
  workshopsCount: Int!
}

scalar Country

"""
Autogenerated return type of CreateActivity.
"""
type CreateActivityPayload {
  activity: Activity!
  session: Session
}

"""
Autogenerated return type of CreateMultipleSessions.
"""
type CreateMultipleSessionsPayload {
  sessions: [Session!]!
}

"""
Autogenerated return type of CreatePerson.
"""
type CreatePersonPayload {
  profile: Person!
}

"""
Autogenerated return type of CreateSession.
"""
type CreateSessionPayload {
  session: Session!
}

"""
Autogenerated return type of CreateTranslation.
"""
type CreateTranslationPayload {
  translation: Translation!
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

type CreditCardPayment implements Payment {
  amount: Money!
  id: ID!
}

type Festival {
  activities(type: ActivityType): [Activity!]!
  activity(slug: String!, type: ActivityType!): Activity
  earlybirdClosesAt: ISO8601DateTime
  earlybirdOpensAt: ISO8601DateTime
  endDate: ISODate!
  generalOpensAt: ISO8601DateTime
  id: ID!
  registrationPhase: RegistrationPhase!
  registrations: [Registration!]!
  slots(type: ActivityType): [Slot!]!
  startDate: ISODate!
  state: FestivalState!
  timetable: Timetable!
  venues: [Venue!]!
  workshopAllocation: WorkshopAllocation
}

enum FestivalState {
  """
  In the past
  """
  Finished

  """
  Happening right now
  """
  Happening

  """
  In the future
  """
  Upcoming
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

scalar ISODate

type InternetBankingPayment implements Payment {
  amount: Money!
  id: ID!
}

"""
Autogenerated return type of JobProgress.
"""
type JobProgressPayload {
  error: String
  id: ID!
  progress: Int!
  state: JobState!
  total: Int!
}

enum JobState {
  """
  Job is completed
  """
  completed

  """
  Job has failed
  """
  failed

  """
  Job is pending
  """
  pending

  """
  Job is working
  """
  working
}

"""
Autogenerated return type of MergePeople.
"""
type MergePeoplePayload {
  profile: Person!
}

scalar Money

"""
Autogenerated return type of MoveActivity.
"""
type MoveActivityPayload {
  activity: Activity!
}

"""
Autogenerated return type of MoveAllocatedParticipant.
"""
type MoveAllocatedParticipantPayload {
  allocation: WorkshopAllocation!
}

input MultipleSessionAttributes {
  activityType: ActivityType!
  festivalId: ID!
  timeRanges: [TimeRangeAttributes!]!
  venueIds: [ID!]!
}

type Mutation {
  addPreference(registrationId: ID, sessionId: ID!): AddPreferencePayload
  allocateWorkshops: allocateWorkshopsPayload
  createActivity(attributes: ActivityAttributes!, festivalId: ID!, sessionId: ID, type: ActivityType!): CreateActivityPayload
  createPerson(attributes: PersonAttributes!): CreatePersonPayload
  createSession(attributes: SessionAttributes!, festivalId: ID!): CreateSessionPayload
  createSessions(attributes: MultipleSessionAttributes!): CreateMultipleSessionsPayload
  createTranslation(name: String!, traditionalName: String!): CreateTranslationPayload
  destroySession(id: ID!): Boolean
  destroyTranslation(id: ID!): Boolean
  finaliseRegistration: finaliseRegistrationPayload
  mergePeople(attributes: ProfileMergeAttributes!, profileIds: [ID!]!): MergePeoplePayload
  moveActivity(id: ID!, slug: String!): MoveActivityPayload
  moveAllocatedParticipant(newSessionId: ID, oldSessionId: ID, registrationId: ID!, waitlist: Boolean): MoveAllocatedParticipantPayload
  removePreference(registrationId: ID, sessionId: ID!): Boolean
  renameActivity(id: ID!, name: String!): RenameActivityPayload
  resetPasswordAndLogIn(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): ResetPasswordAndLogInPayload
  updateActivity(attributes: ActivityAttributes!, id: ID!): UpdateActivityPayload
  updatePerson(attributes: PersonAttributes!, id: ID!): UpdatePersonPayload
  updateRegistrationUserDetails(attributes: UserDetailsAttributes!, registrationId: ID): UpdateUserDetailsPayload
  updateSession(attributes: SessionAttributes!, id: ID!): UpdateSessionPayload
  updateSetting(id: String!, value: SettingValue!): UpdateSettingPayload
  updateTranslation(id: ID!, name: String!, traditionalName: String!): UpdateTranslationPayload
  updateUser(attributes: UserAttributes!, id: ID): UpdateUserPayload
  userConfirmRegistrationWithToken(confirmationToken: String!): UserConfirmRegistrationWithTokenPayload
  userLogin(email: String!, password: String!): UserLoginPayload
  userLogout: UserLogoutPayload
  userRegister(confirmUrl: String, email: String!, name: String!, password: String!, passwordConfirmation: String!): UserRegisterPayload
  userResendConfirmationWithToken(confirmUrl: String!, email: String!): UserResendConfirmationWithTokenPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

type PageResult implements SearchResult {
  description: String
  id: ID!
  lede: String
  slug: String!
  title: String!
  url: String!
}

interface Payment {
  amount: Money!
  id: ID!
}

enum Permission {
  """
  Manage activities
  """
  activities

  """
  Administrator
  """
  admin

  """
  Manage content
  """
  content

  """
  Manage people
  """
  people

  """
  Manage permissions
  """
  permissions

  """
  Manage registrations
  """
  registrations

  """
  Manage shows
  """
  shows

  """
  Manage social events
  """
  social_events

  """
  Manage workshops
  """
  workshops
}

type PermissionDefinition {
  children: [PermissionDefinition!]
  id: Permission!
  label: String!
}

type Person {
  bio: String!
  city: Placename
  country: Placename
  id: ID!
  name: String!
  phone: String
  picture: ProfilePicture
  pronouns: String
  user: User
}

input PersonAttributes {
  bio: String
  city: String
  country: Country
  name: String
  picture: Upload
  pronouns: String
}

type PersonResult implements SearchResult {
  description: String
  id: ID!
  person: Person!
  title: String!
  url: String!
}

type Placename {
  id: ID!
  name: String!
  raw: String!
  traditionalName: String
}

type Preference {
  id: ID!
  position: Int!
  slot: Slot!
  workshop: Workshop!
}

input ProfileMergeAttributes {
  city: ID
  country: ID
  name: ID
  pronouns: ID
}

type ProfilePicture {
  id: ID!

  """
  256x256
  """
  large: String!

  """
  128x128
  """
  medium: String!

  """
  64x64
  """
  small: String!
}

type Query {
  festival(year: String): Festival!
  people: [Person!]
  permissions: [PermissionDefinition!]!
  person(id: ID!): Person
  registration(id: ID): Registration!
  search(activityType: ActivityType, limit: Int, only: [SearchType!] = [Activity, Person, Page], query: String!): [SearchResult!]!
  setting(id: String!): Setting
  translations: [Translation!]!
  user(id: ID): User
}

type Registration {
  cart: Cart
  codeOfConductAcceptedAt: ISO8601DateTime
  completedAt: ISO8601DateTime
  id: ID!
  payments: [Payment!]!
  preferences: [Preference!]!
  sessions: [Session!]!
  user: User
  waitlist: [Session!]!
  workshopsCount: Int!
}

enum RegistrationPhase {
  """
  Closed
  """
  Closed

  """
  Earlybird
  """
  Earlybird

  """
  General
  """
  General

  """
  Paused
  """
  Paused

  """
  Pending
  """
  Pending
}

"""
Autogenerated return type of Registrations.
"""
type RegistrationsPayload {
  count: Int!
}

"""
Autogenerated return type of RenameActivity.
"""
type RenameActivityPayload {
  activity: Activity!
}

"""
Autogenerated return type of ResetPasswordAndLogIn.
"""
type ResetPasswordAndLogInPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

interface SearchResult {
  description: String
  id: ID!
  title: String!
  url: String!
}

enum SearchType {
  """
  Activity
  """
  Activity

  """
  Page
  """
  Page

  """
  Person
  """
  Person

  """
  Venue
  """
  Venue
}

type Session {
  activity: Activity
  activityType: ActivityType!
  capacity: Int
  count: Int!
  endsAt: ISO8601DateTime!
  id: ID!
  participants: [Registration!]!
  slot: Slot!
  startsAt: ISO8601DateTime!
  venue: Venue
  waitlist: [Waitlist!]!
  workshop: Workshop
}

input SessionAttributes {
  activityId: ID
  activityType: ActivityType
  capacity: Int
  endsAt: ISO8601DateTime
  startsAt: ISO8601DateTime
  venueId: ID
}

interface Setting {
  description: String!
  id: String!
}

input SettingValue {
  boolean: Boolean
  string: String
}

type Show implements Activity {
  bookingLink: String
  description: String

  """
  Directors
  """
  directors: [Person!]!
  id: ID!
  missingInfo: [String!]!
  name: String!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  slug: String!
  type: ActivityType!
  workshop: Workshop
}

type Slot {
  endsAt: ISO8601DateTime!
  id: ID!
  sessions: [Session!]!
  startsAt: ISO8601DateTime!
  workshops: [Workshop!]!
}

type SocialEvent implements Activity {
  description: String
  id: ID!
  missingInfo: [String!]!
  name: String!

  """
  Organisers
  """
  organisers: [Person!]!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  slug: String!
  type: ActivityType!
}

type StringSetting implements Setting {
  description: String!
  id: String!
  value: String!
}

type Subscription {
  jobProgress(id: ID!, jobName: String!): JobProgressPayload!
  registrations(year: ID!): RegistrationsPayload!
}

input TimeRangeAttributes {
  endsAt: ISO8601DateTime!
  startsAt: ISO8601DateTime!
}

type Timetable {
  id: ID!
  sessions: [Session!]!
}

type Translation {
  id: ID!
  name: String!
  traditionalName: String!
}

"""
Autogenerated return type of UpdateActivity.
"""
type UpdateActivityPayload {
  activity: Activity!
}

"""
Autogenerated return type of UpdatePerson.
"""
type UpdatePersonPayload {
  profile: Person!
}

"""
Autogenerated return type of UpdateSession.
"""
type UpdateSessionPayload {
  session: Session!
}

"""
Autogenerated return type of UpdateSetting.
"""
type UpdateSettingPayload {
  setting: Setting!
}

"""
Autogenerated return type of UpdateTranslation.
"""
type UpdateTranslationPayload {
  translation: Translation!
}

"""
Autogenerated return type of UpdateUserDetails.
"""
type UpdateUserDetailsPayload {
  registration: Registration!
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  user: User!
}

scalar Upload

type User {
  email: String!
  id: ID!
  name: String!
  permissions: [Permission!]!
  profile: Person
  settings: [Setting!]!
}

input UserAttributes {
  email: String
  name: String
  permissions: [Permission!]
}

"""
Autogenerated return type of UserConfirmRegistrationWithToken.
"""
type UserConfirmRegistrationWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Null unless user is signed in after confirmation.
  """
  credentials: Credential
}

input UserDetailsAttributes {
  city: String
  codeOfConductAcceptedAt: ISO8601DateTime
  country: String
  email: String
  name: String
  phone: String
  pronouns: String
}

"""
Autogenerated return type of UserLogin.
"""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""
Autogenerated return type of UserLogout.
"""
type UserLogoutPayload {
  authenticatable: User!
}

"""
Autogenerated return type of UserRegister.
"""
type UserRegisterPayload {
  authenticatable: User!

  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
}

"""
Autogenerated return type of UserResendConfirmationWithToken.
"""
type UserResendConfirmationWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserSendPasswordResetWithToken.
"""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserUpdatePasswordWithToken.
"""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

type Venue {
  address: String!
  building: String!
  id: ID!
  latitude: Float!
  longitude: Float!
  position: Int!
  room: String
}

type VenueResult implements SearchResult {
  description: String
  id: ID!
  title: String!
  url: String!
  venue: Venue!
}

type Voucher implements Payment {
  amount: Money!
  id: ID!
}

type Waitlist {
  id: ID!
  offeredAt: ISO8601DateTime
  position: Int!
  registration: Registration!
}

type Workshop implements Activity {
  capacity: Int!
  description: String
  id: ID!
  missingInfo: [String!]!
  name: String!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  show: Show
  slug: String!
  stats: WorkshopStat!
  suitability: String

  """
  Tutors
  """
  tutors: [Person!]!
  type: ActivityType!
}

type WorkshopAllocation {
  id: ID!
  score: Float
  slot(startsAt: ISO8601DateTime!): WorkshopAllocationSlot!
  slots: [WorkshopAllocationSlot!]!
  state: JobState!
}

type WorkshopAllocationSession {
  capacity: Int!
  id: ID!
  registrations: [Registration!]!
  waitlist: [Registration!]!
  workshop: Workshop!
}

type WorkshopAllocationSlot {
  id: ID!
  sessions: [WorkshopAllocationSession!]!
  startsAt: ISO8601DateTime!
}

type WorkshopStat {
  counts: [Int!]!
  id: ID!
}

"""
Autogenerated return type of allocateWorkshops.
"""
type allocateWorkshopsPayload {
  workshopAllocation: WorkshopAllocation!
}

"""
Autogenerated return type of finaliseRegistration.
"""
type finaliseRegistrationPayload {
  registration: Registration!
}
