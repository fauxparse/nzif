"""
An activity that may be scheduled during the Festival
"""
interface Activity {
  """
  Unique ID
  """
  id: ID!

  """
  Activity name
  """
  name: String!

  """
  For use in URL generation
  """
  slug: String!
}

"""
The state of a festival
"""
enum ActivityType {
  """
  Show
  """
  show

  """
  Workshop
  """
  workshop
}

"""
A boolean user preference
"""
type BooleanPreference implements Preference {
  """
  Preference description
  """
  description: String!

  """
  Preference ID
  """
  id: String!

  """
  Preference value
  """
  value: Boolean!
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

"""
A festival
"""
type Festival {
  """
  Activities (including unscheduled ones)
  """
  activities(
    """
    Activity type
    """
    type: ActivityType
  ): [Activity!]!

  """
  Retrieve an activity by its type and slug
  """
  activity(
    """
    URL segment
    """
    slug: String!

    """
    Activity type
    """
    type: ActivityType!
  ): Activity

  """
  The last day of the festival
  """
  endDate: ISODate!

  """
  Year of the festival
  """
  id: ID!

  """
  The first day of the festival
  """
  startDate: ISODate!

  """
  State of the festival
  """
  state: FestivalState!
}

"""
The state of a festival
"""
enum FestivalState {
  """
  In the past
  """
  Finished

  """
  Happening right now
  """
  Happening

  """
  In the future
  """
  Upcoming
}

"""
A date in ISO8601 format
"""
scalar ISODate

"""
Top-level mutation interface
"""
type Mutation {
  """
  Updates a userâ€™s preference
  """
  updatePreference(
    """
    The ID of the preference to update
    """
    id: String!

    """
    The new value for the preference as a boolean
    """
    value: PreferenceValue!
  ): Preference
  userConfirmRegistrationWithToken(confirmationToken: String!): UserConfirmRegistrationWithTokenPayload
  userLogin(email: String!, password: String!): UserLoginPayload
  userLogout: UserLogoutPayload
  userRegister(confirmUrl: String, email: String!, name: String!, password: String!, passwordConfirmation: String!): UserRegisterPayload
  userResendConfirmationWithToken(confirmUrl: String!, email: String!): UserResendConfirmationWithTokenPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

"""
A user preference
"""
interface Preference {
  """
  Preference description
  """
  description: String!

  """
  Preference ID
  """
  id: String!
}

"""
Value for a user preference
"""
input PreferenceValue {
  """
  The new value for the preference as a boolean
  """
  boolean: Boolean

  """
  The new value for the preference as a string
  """
  string: String
}

"""
Top-level query interface
"""
type Query {
  """
  Find a festival by year
  """
  festival(
    """
    The year of the festival
    """
    year: String!
  ): Festival!

  """
  User preference (if set)
  """
  preference(
    """
    The ID of the preference to retrieve
    """
    id: String!
  ): Preference

  """
  Current user
  """
  user: User
}

"""
A show
"""
type Show implements Activity {
  """
  Unique ID
  """
  id: ID!

  """
  Activity name
  """
  name: String!

  """
  For use in URL generation
  """
  slug: String!
}

"""
A string user preference
"""
type StringPreference implements Preference {
  """
  Preference description
  """
  description: String!

  """
  Preference ID
  """
  id: String!

  """
  Preference value
  """
  value: String!
}

"""
A user
"""
type User {
  """
  Email address
  """
  email: String!

  """
  Unique ID
  """
  id: ID!

  """
  Name
  """
  name: String!
}

"""
Autogenerated return type of UserConfirmRegistrationWithToken.
"""
type UserConfirmRegistrationWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Null unless user is signed in after confirmation.
  """
  credentials: Credential
}

"""
Autogenerated return type of UserLogin.
"""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""
Autogenerated return type of UserLogout.
"""
type UserLogoutPayload {
  authenticatable: User!
}

"""
Autogenerated return type of UserRegister.
"""
type UserRegisterPayload {
  authenticatable: User!

  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
}

"""
Autogenerated return type of UserResendConfirmationWithToken.
"""
type UserResendConfirmationWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserSendPasswordResetWithToken.
"""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserUpdatePasswordWithToken.
"""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

"""
A workshop
"""
type Workshop implements Activity {
  """
  Unique ID
  """
  id: ID!

  """
  Activity name
  """
  name: String!

  """
  For use in URL generation
  """
  slug: String!
}
