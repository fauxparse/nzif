interface Activity {
  bookingLink: String
  description: String
  id: ID!
  missingInfo: [String!]!
  name: String!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  slug: String!
  type: ActivityType!
}

input ActivityAttributes {
  attachedActivityId: ID
  bookingLink: String
  description: String
  name: String
  picture: Upload
  pictureAltText: String
  profileIds: [ID!]
  slug: String
  suitability: String
  uploadedPicture: UploadedFile
}

type ActivityCount {
  count: Int!
  id: ActivityType!
}

type ActivityPicture {
  altText: String
  blurhash: String!
  id: ID!

  """
  1920x1080
  """
  large: String!

  """
  1280x720
  """
  medium: String!

  """
  480x270
  """
  small: String!

  """
  48x27
  """
  tiny: String!
}

type ActivityResult implements SearchResult {
  activity: Activity!
  description: String
  id: ID!
  title: String!
  url: String!
}

enum ActivityType {
  """
  Conference
  """
  Conference

  """
  Show
  """
  Show

  """
  SocialEvent
  """
  SocialEvent

  """
  Workshop
  """
  Workshop
}

"""
Autogenerated return type of AddPayment.
"""
type AddPaymentPayload {
  payment: Payment!
}

"""
Autogenerated return type of AddPreference.
"""
type AddPreferencePayload {
  preference: Preference!
}

"""
Autogenerated return type of AddSessionCast.
"""
type AddSessionCastPayload {
  cast: Person!
}

"""
Autogenerated return type of AddToSession.
"""
type AddToSessionPayload {
  registration: Registration!
  session: Session!
}

"""
Autogenerated return type of AddToWaitlist.
"""
type AddToWaitlistPayload {
  waitlist: Waitlist!
}

"""
Autogenerated return type of AddVoucher.
"""
type AddVoucherPayload {
  voucher: Voucher!
}

type Appearance {
  activity: Activity!
  id: ID!
  role: Role!
  sessions: [Session!]!
}

"""
Autogenerated return type of ApprovePayment.
"""
type ApprovePaymentPayload {
  payment: Payment!
}

type Balance {
  id: ID!
  paid: Money!
  total: Money!
}

type BooleanSetting implements Setting {
  description: String!
  id: String!
  value: Boolean!
}

type CalendarSession {
  hidden: Boolean!
  id: ID!
  session: Session!
  waitlisted: Boolean!
}

"""
Autogenerated return type of CancelPayment.
"""
type CancelPaymentPayload {
  payment: Payment!
}

type Cart {
  discount: Money!
  id: ID!
  outstanding: Money!
  paid: Money!
  total: Money!
  value: Money!
  workshopsCount: Int!
}

type City {
  country: Country!
  id: ID!
  name: String!
  traditionalNames: [String!]!
}

input CityAttributes {
  country: String!
  name: String!
  traditionalNames: [String!]
}

type Conference implements Activity {
  bookingLink: String
  description: String
  id: ID!
  missingInfo: [String!]!
  name: String!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  slug: String!

  """
  Speakers
  """
  speakers: [Person!]!
  type: ActivityType!
}

scalar Country

"""
Autogenerated return type of CreateActivity.
"""
type CreateActivityPayload {
  activity: Activity!
  session: Session
}

"""
Autogenerated return type of CreateMultipleSessions.
"""
type CreateMultipleSessionsPayload {
  sessions: [Session!]!
}

"""
Autogenerated return type of CreatePerson.
"""
type CreatePersonPayload {
  profile: Person!
}

"""
Autogenerated return type of CreateSession.
"""
type CreateSessionPayload {
  session: Session!
}

"""
Autogenerated return type of CreateTranslation.
"""
type CreateTranslationPayload {
  translation: Translation!
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

type CreditCardPayment implements Payment {
  amount: Money!
  createdAt: ISO8601DateTime!
  id: ID!
  reference: String!
  registration: Registration!
  state: PaymentState!
}

"""
Autogenerated return type of DemoteSessionParticipant.
"""
type DemoteSessionParticipantPayload {
  session: Session!
}

type Feedback {
  constructive: String!
  id: ID!
  positive: String!
  rating: Int
  registration: Registration!
  session: Session!
  testimonial: String!
}

input FeedbackAttributes {
  constructive: String
  positive: String
  rating: Int
  testimonial: String
}

type Festival {
  activities(type: ActivityType): [Activity!]!
  activity(slug: String!, type: ActivityType!): Activity
  activityCounts: [ActivityCount!]!
  balance: Balance!
  earlybirdClosesAt: ISO8601DateTime
  earlybirdOpensAt: ISO8601DateTime
  endDate: ISODate!
  generalOpensAt: ISO8601DateTime
  id: ID!
  payments: [Payment!]
  people: [Person!]!
  registrationPhase: RegistrationPhase!
  registrations(name: String): [Registration!]!
  session(id: ID!): Session!
  slots(type: ActivityType): [Slot!]!
  startDate: ISODate!
  state: FestivalState!
  timetable: Timetable!
  venues: [Venue!]!
  workshopAllocation: WorkshopAllocation
  workshopPricing: Pricing!
  workshopTotal: Money!
  workshops: [Workshop!]!
}

enum FestivalState {
  """
  In the past
  """
  Finished

  """
  Happening right now
  """
  Happening

  """
  In the future
  """
  Upcoming
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

scalar ISODate

type InternetBankingPayment implements Payment {
  amount: Money!
  createdAt: ISO8601DateTime!
  id: ID!
  reference: String!
  registration: Registration!
  state: PaymentState!
}

"""
Autogenerated return type of JobProgress.
"""
type JobProgressPayload {
  error: String
  id: ID!
  progress: Int!
  state: JobState!
  total: Int!
}

enum JobState {
  """
  Job is completed
  """
  completed

  """
  Job has failed
  """
  failed

  """
  Job is pending
  """
  pending

  """
  Job is working
  """
  working
}

"""
Autogenerated return type of MergePeople.
"""
type MergePeoplePayload {
  profile: Person!
}

type Message {
  content: String
  createdAt: ISO8601DateTime!
  id: ID!
  sender: User!
  subject: String
}

scalar Money

"""
Autogenerated return type of MoveActivity.
"""
type MoveActivityPayload {
  activity: Activity!
}

"""
Autogenerated return type of MoveAllocatedParticipant.
"""
type MoveAllocatedParticipantPayload {
  allocation: WorkshopAllocation!
}

"""
Autogenerated return type of MoveWaitlistParticipant.
"""
type MoveWaitlistParticipantPayload {
  waitlist: [Waitlist!]!
}

input MultipleSessionAttributes {
  activityId: ID
  activityType: ActivityType!
  capacity: Int
  festivalId: ID!
  timeRanges: [TimeRangeAttributes!]!
  venueIds: [ID!]!
}

type Mutation {
  addPayment(amount: Money!, registrationId: ID!, type: PaymentType = InternetBankingPayment): AddPaymentPayload
  addPreference(registrationId: ID, sessionId: ID!): AddPreferencePayload
  addSessionCast(profileId: ID!, role: Role!, sessionId: ID!): AddSessionCastPayload
  addToSession(registrationId: ID, sessionId: ID!): AddToSessionPayload
  addToWaitlist(registrationId: ID, sessionId: ID!): AddToWaitlistPayload
  addVoucher(registrationId: ID!, workshops: Int!): AddVoucherPayload
  allocateWorkshops: allocateWorkshopsPayload
  approvePayment(id: ID!): ApprovePaymentPayload
  cancelPayment(id: ID!): CancelPaymentPayload
  createActivity(attributes: ActivityAttributes!, festivalId: ID, sessionId: ID, type: ActivityType!): CreateActivityPayload
  createPerson(attributes: PersonAttributes!): CreatePersonPayload
  createSession(attributes: SessionAttributes!, festivalId: ID!): CreateSessionPayload
  createSessions(attributes: MultipleSessionAttributes!): CreateMultipleSessionsPayload
  createTranslation(name: String!, traditionalName: String!): CreateTranslationPayload
  demoteSessionParticipant(position: Int!, registrationId: ID!, sessionId: ID!): DemoteSessionParticipantPayload
  destroySession(id: ID!): Boolean
  destroyTranslation(id: ID!): Boolean
  finaliseRegistration: finaliseRegistrationPayload
  mergePeople(attributes: ProfileMergeAttributes!, profileIds: [ID!]!): MergePeoplePayload
  moveActivity(id: ID!, slug: String!): MoveActivityPayload
  moveAllocatedParticipant(newSessionId: ID, oldSessionId: ID, registrationId: ID!, waitlist: Boolean): MoveAllocatedParticipantPayload
  moveWaitlistParticipant(position: Int!, registrationId: ID!, sessionId: ID!): MoveWaitlistParticipantPayload
  promiseInternetBankingPayment(amount: Money!, registrationId: ID!): PromiseInternetBankingPaymentPayload
  promoteWaitlistParticipant(registrationId: ID!, sessionId: ID!): PromoteWaitlistParticipantPayload
  removeFromSession(promote: Boolean, registrationId: ID, sessionId: ID!): RemoveFromSessionPayload
  removeFromWaitlist(registrationId: ID, sessionId: ID!): Boolean
  removePreference(registrationId: ID, sessionId: ID!): Boolean
  removeSessionCast(profileId: ID!, role: Role!, sessionId: ID!): Boolean
  renameActivity(id: ID!, name: String!): RenameActivityPayload
  resetPasswordAndLogIn(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): ResetPasswordAndLogInPayload
  saveFeedback(attributes: FeedbackAttributes!, sessionId: ID!): SaveFeedbackPayload
  sendMessage(content: String!, sessionId: ID!, subject: String!): SendMessagePayload
  setSessionVisibility(hidden: Boolean!, sessionId: ID!): CalendarSession
  updateActivity(attributes: ActivityAttributes!, id: ID!): UpdateActivityPayload
  updatePayment(attributes: PaymentAttributes!, id: ID!): UpdatePaymentPayload
  updatePerson(attributes: PersonAttributes!, id: ID!): UpdatePersonPayload
  updatePreferences(preferences: [PreferenceAttributes!]!): updatePreferencesPayload
  updateProfile(attributes: ProfileAttributes!): Person
  updateRegistrationUserDetails(attributes: UserDetailsAttributes!, registrationId: ID): UpdateUserDetailsPayload
  updateSession(attributes: SessionAttributes!, id: ID!): UpdateSessionPayload
  updateSetting(id: String!, value: SettingValue!): UpdateSettingPayload
  updateTranslation(id: ID!, name: String!, traditionalName: String!): UpdateTranslationPayload
  updateUser(attributes: UserAttributes!, id: ID): UpdateUserPayload
  userConfirmRegistrationWithToken(confirmationToken: String!): UserConfirmRegistrationWithTokenPayload
  userLogin(email: String!, password: String!): UserLoginPayload
  userLogout: UserLogoutPayload
  userRegister(confirmUrl: String, email: String!, name: String!, password: String!, passwordConfirmation: String!): UserRegisterPayload
  userResendConfirmationWithToken(confirmUrl: String!, email: String!): UserResendConfirmationWithTokenPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

type PageResult implements SearchResult {
  description: String
  id: ID!
  lede: String
  slug: String!
  title: String!
  url: String!
}

interface Payment {
  amount: Money!
  createdAt: ISO8601DateTime!
  id: ID!
  reference: String!
  registration: Registration!
  state: PaymentState!
}

input PaymentAttributes {
  state: PaymentState
}

enum PaymentState {
  """
  Approved
  """
  Approved

  """
  Cancelled
  """
  Cancelled

  """
  Failed
  """
  Failed

  """
  Pending
  """
  Pending
}

enum PaymentType {
  """
  CreditCardPayment
  """
  CreditCardPayment

  """
  InternetBankingPayment
  """
  InternetBankingPayment

  """
  Refund
  """
  Refund

  """
  Voucher
  """
  Voucher
}

enum Permission {
  """
  Manage activities
  """
  activities

  """
  Administrator
  """
  admin

  """
  Manage content
  """
  content

  """
  Manage payments
  """
  payments

  """
  Manage people
  """
  people

  """
  Manage permissions
  """
  permissions

  """
  Manage registrations
  """
  registrations

  """
  Manage shows
  """
  shows

  """
  Manage social events
  """
  social_events

  """
  Manage workshops
  """
  workshops
}

type PermissionDefinition {
  children: [PermissionDefinition!]
  id: Permission!
  label: String!
}

type Person {
  appearances: [Appearance!]!
  bio: String!
  city: City
  id: ID!
  name: String!
  phone: String
  picture: ProfilePicture
  pronouns: String
  user: User
}

input PersonAttributes {
  bio: String
  city: CityAttributes
  name: String
  phone: String
  picture: Upload
  pronouns: String
  uploadedPicture: UploadedFile
}

type PersonResult implements SearchResult {
  description: String
  id: ID!
  person: Person!
  title: String!
  url: String!
}

type Preference {
  id: ID!
  position: Int!
  session: Session!
  sessionId: ID!
  workshop: Workshop!
}

input PreferenceAttributes {
  position: Int!
  sessionId: ID!
}

type Pricing {
  baseWorkshopPrice: Money!
  discountLimit: Int!
  discountPerAdditionalWorkshop: Money!
  id: ID!
}

input ProfileAttributes {
  bio: String
  city: CityAttributes
  email: String
  name: String
  phone: String
  picture: Upload
  pronouns: String
  uploadedPicture: UploadedFile
}

input ProfileMergeAttributes {
  city: ID
  country: ID
  name: ID
  pronouns: ID
}

type ProfilePicture {
  id: ID!

  """
  256x256
  """
  large: String!

  """
  128x128
  """
  medium: String!

  """
  64x64
  """
  small: String!
}

"""
Autogenerated return type of PromiseInternetBankingPayment.
"""
type PromiseInternetBankingPaymentPayload {
  payment: Payment!
}

"""
Autogenerated return type of PromoteWaitlistParticipant.
"""
type PromoteWaitlistParticipantPayload {
  registration: Registration!
}

type Query {
  calendar: [CalendarSession!]!
  cities: [City!]!
  directoryResult(id: ID!, time: ISO8601DateTime!): Session
  directorySearch(query: String!): [Person!]!
  festival(year: String): Festival!
  payment(id: ID!): Payment!
  people: [Person!]
  permissions: [PermissionDefinition!]!
  person(id: ID!): Person
  registration(id: ID): Registration!
  search(activityType: ActivityType, limit: Int, only: [SearchType!] = [Person, Activity, Venue, Page], query: String!): [SearchResult!]!
  setting(id: String!): Setting
  translations: [Translation!]!
  user(id: ID): User
}

type Refund implements Payment {
  amount: Money!
  createdAt: ISO8601DateTime!
  id: ID!
  reference: String!
  registration: Registration!
  state: PaymentState!
}

type Registration {
  cart: Cart
  codeOfConductAcceptedAt: ISO8601DateTime
  completedAt: ISO8601DateTime
  feedback: [Feedback!]!
  id: ID!
  outstanding: Money!
  payments: [Payment!]!
  photoPermission: Boolean!
  preferences: [Preference!]!
  sessions: [Session!]!
  showExplainer: Boolean!
  user: User
  waitlist: [Session!]!
  workshopsCount: Int!
}

enum RegistrationPhase {
  """
  Closed
  """
  Closed

  """
  Earlybird
  """
  Earlybird

  """
  General
  """
  General

  """
  Paused
  """
  Paused

  """
  Pending
  """
  Pending
}

"""
Autogenerated return type of Registrations.
"""
type RegistrationsPayload {
  count: Int!
}

"""
Autogenerated return type of RemoveFromSession.
"""
type RemoveFromSessionPayload {
  registration: Registration!
  session: Session!
}

"""
Autogenerated return type of RenameActivity.
"""
type RenameActivityPayload {
  activity: Activity!
}

"""
Autogenerated return type of ResetPasswordAndLogIn.
"""
type ResetPasswordAndLogInPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

enum Role {
  """
  director
  """
  director

  """
  host
  """
  host

  """
  muso
  """
  muso

  """
  operator
  """
  operator

  """
  organiser
  """
  organiser

  """
  performer
  """
  performer

  """
  scorekeeper
  """
  scorekeeper

  """
  speaker
  """
  speaker

  """
  tutor
  """
  tutor
}

"""
Autogenerated return type of SaveFeedback.
"""
type SaveFeedbackPayload {
  feedback: Feedback!
}

interface SearchResult {
  description: String
  id: ID!
  title: String!
  url: String!
}

enum SearchType {
  """
  Activity
  """
  Activity

  """
  Page
  """
  Page

  """
  Person
  """
  Person

  """
  Venue
  """
  Venue
}

"""
Autogenerated return type of SendMessage.
"""
type SendMessagePayload {
  message: Message!
}

type Session {
  activity: Activity
  activityType: ActivityType!
  capacity: Int
  count: Int!
  endsAt: ISO8601DateTime!
  hosts: [Person!]!
  id: ID!
  messages: [Message!]!
  musos: [Person!]!
  operators: [Person!]!
  participants: [Registration!]!
  performers: [Person!]!
  slot: Slot!
  slots: [Slot!]!
  startsAt: ISO8601DateTime!
  venue: Venue
  waitlist: [Waitlist!]!
  workshop: Workshop
}

input SessionAttributes {
  activityId: ID
  activityType: ActivityType
  capacity: Int
  endsAt: ISO8601DateTime
  startsAt: ISO8601DateTime
  venueId: ID
}

interface Setting {
  description: String!
  id: String!
}

input SettingValue {
  boolean: Boolean
  string: String
}

type Show implements Activity {
  bookingLink: String
  description: String

  """
  Directors
  """
  directors: [Person!]!
  id: ID!
  missingInfo: [String!]!
  name: String!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  slug: String!
  type: ActivityType!
  workshop: Workshop
}

type Slot {
  endsAt: ISO8601DateTime!
  id: ID!
  sessions(type: ActivityType): [Session!]!
  startsAt: ISO8601DateTime!
  workshops: [Workshop!]!
}

type SocialEvent implements Activity {
  bookingLink: String
  description: String
  id: ID!
  missingInfo: [String!]!
  name: String!

  """
  Organisers
  """
  organisers: [Person!]!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  slug: String!
  type: ActivityType!
}

type StringSetting implements Setting {
  description: String!
  id: String!
  value: String!
}

type Subscription {
  jobProgress(id: ID!, jobName: String!): JobProgressPayload!
  registrations(year: ID!): RegistrationsPayload!
}

input TimeRangeAttributes {
  endsAt: ISO8601DateTime!
  startsAt: ISO8601DateTime!
}

type Timetable {
  id: ID!
  sessions: [Session!]!
}

type Translation {
  id: ID!
  name: String!
  traditionalName: String!
}

"""
Autogenerated return type of UpdateActivity.
"""
type UpdateActivityPayload {
  activity: Activity!
}

"""
Autogenerated return type of UpdatePayment.
"""
type UpdatePaymentPayload {
  payment: Payment!
}

"""
Autogenerated return type of UpdatePerson.
"""
type UpdatePersonPayload {
  profile: Person!
}

"""
Autogenerated return type of UpdateSession.
"""
type UpdateSessionPayload {
  session: Session!
}

"""
Autogenerated return type of UpdateSetting.
"""
type UpdateSettingPayload {
  setting: Setting!
}

"""
Autogenerated return type of UpdateTranslation.
"""
type UpdateTranslationPayload {
  translation: Translation!
}

"""
Autogenerated return type of UpdateUserDetails.
"""
type UpdateUserDetailsPayload {
  registration: Registration!
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  user: User!
}

scalar Upload

input UploadedFile {
  filename: String!
  id: String!
  mimeType: String
  size: Int!
}

type User {
  activities: [Activity!]!
  email: String!
  id: ID!
  name: String!
  permissions: [Permission!]!
  profile: Person
  settings: [Setting!]!
}

input UserAttributes {
  email: String
  name: String
  password: String
  passwordConfirmation: String
  permissions: [Permission!]
}

"""
Autogenerated return type of UserConfirmRegistrationWithToken.
"""
type UserConfirmRegistrationWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Null unless user is signed in after confirmation.
  """
  credentials: Credential
}

input UserDetailsAttributes {
  city: String
  codeOfConductAcceptedAt: ISO8601DateTime
  country: String
  email: String
  name: String
  phone: String
  photoPermission: Boolean
  pronouns: String
  showExplainer: Boolean
}

"""
Autogenerated return type of UserLogin.
"""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""
Autogenerated return type of UserLogout.
"""
type UserLogoutPayload {
  authenticatable: User!
}

"""
Autogenerated return type of UserRegister.
"""
type UserRegisterPayload {
  authenticatable: User!

  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
}

"""
Autogenerated return type of UserResendConfirmationWithToken.
"""
type UserResendConfirmationWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserSendPasswordResetWithToken.
"""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserUpdatePasswordWithToken.
"""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

type Venue {
  address: String!
  building: String!
  id: ID!
  latitude: Float!
  longitude: Float!
  position: Int!
  room: String
}

type VenueResult implements SearchResult {
  description: String
  id: ID!
  title: String!
  url: String!
  venue: Venue!
}

type Voucher implements Payment {
  amount: Money!
  createdAt: ISO8601DateTime!
  id: ID!
  reference: String!
  registration: Registration!
  state: PaymentState!
  workshops: Int!
}

type Waitlist {
  id: ID!
  offeredAt: ISO8601DateTime
  position: Int!
  registration: Registration!
  session: Session
}

type Workshop implements Activity {
  bookingLink: String
  capacity: Int!
  description: String
  feedback: [Feedback!]!
  id: ID!
  missingInfo: [String!]!
  name: String!
  picture: ActivityPicture
  presenters: [Person!]!
  sessions: [Session!]!
  show: Show
  slug: String!
  stats: WorkshopStat!
  suitability: String

  """
  Tutors
  """
  tutors: [Person!]!
  type: ActivityType!
}

type WorkshopAllocation {
  id: ID!
  score: Float
  slot(startsAt: ISO8601DateTime!): WorkshopAllocationSlot!
  slots: [WorkshopAllocationSlot!]!
  state: JobState!
}

type WorkshopAllocationSession {
  capacity: Int!
  id: ID!
  registrations: [Registration!]!
  waitlist: [Registration!]!
  workshop: Workshop!
}

type WorkshopAllocationSlot {
  id: ID!
  sessions: [WorkshopAllocationSession!]!
  startsAt: ISO8601DateTime!
}

type WorkshopStat {
  counts: [Int!]!
  id: ID!
}

"""
Autogenerated return type of allocateWorkshops.
"""
type allocateWorkshopsPayload {
  workshopAllocation: WorkshopAllocation!
}

"""
Autogenerated return type of finaliseRegistration.
"""
type finaliseRegistrationPayload {
  registration: Registration!
}

"""
Autogenerated return type of updatePreferences.
"""
type updatePreferencesPayload {
  registration: Registration!
}
