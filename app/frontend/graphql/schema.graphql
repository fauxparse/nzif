interface Activity {
  description: String
  id: ID!
  name: String!
  presenters: [Person!]!
  slots: [Slot!]!
  slug: String!
  type: ActivityType!
}

input ActivityAttributes {
  description: String
  name: String
  profileIds: [ID!]
  slug: String
}

type ActivityResult implements SearchResult {
  activity: Activity!
  description: String
  id: ID!
  title: String!
  url: String!
}

enum ActivityType {
  """
  Show
  """
  Show

  """
  SocialEvent
  """
  SocialEvent

  """
  Workshop
  """
  Workshop
}

type BooleanPreference implements Preference {
  description: String!
  id: String!
  value: Boolean!
}

scalar Country

"""
Autogenerated return type of CreateActivity.
"""
type CreateActivityPayload {
  activity: Activity!
  slot: Slot
}

"""
Autogenerated return type of CreateMultipleSlots.
"""
type CreateMultipleSlotsPayload {
  slots: [Slot!]!
}

"""
Autogenerated return type of Create.
"""
type CreatePayload {
  profile: Person!
}

"""
Autogenerated return type of CreateSlot.
"""
type CreateSlotPayload {
  slot: Slot!
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

type Festival {
  activities(type: ActivityType): [Activity!]!
  activity(slug: String!, type: ActivityType!): Activity
  endDate: ISODate!
  id: ID!
  startDate: ISODate!
  state: FestivalState!
  timetable: Timetable!
  venues: [Venue!]!
}

enum FestivalState {
  """
  In the past
  """
  Finished

  """
  Happening right now
  """
  Happening

  """
  In the future
  """
  Upcoming
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

scalar ISODate

"""
Autogenerated return type of MergePeople.
"""
type MergePeoplePayload {
  profile: Person!
}

"""
Autogenerated return type of MoveActivity.
"""
type MoveActivityPayload {
  activity: Activity!
}

input MultipleSlotAttributes {
  activityType: ActivityType!
  festivalId: ID!
  timeRanges: [TimeRangeAttributes!]!
  venueIds: [ID!]!
}

type Mutation {
  createActivity(attributes: ActivityAttributes!, festivalId: ID!, slotId: ID, type: ActivityType!): CreateActivityPayload
  createPerson(attributes: PersonAttributes!): CreatePayload
  createSlot(attributes: SlotAttributes!, festivalId: ID!): CreateSlotPayload
  createSlots(attributes: MultipleSlotAttributes!): CreateMultipleSlotsPayload
  destroySlot(id: ID!): Boolean
  mergePeople(attributes: ProfileMergeAttributes!, profileIds: [ID!]!): MergePeoplePayload
  moveActivity(id: ID!, slug: String!): MoveActivityPayload
  renameActivity(id: ID!, name: String!): RenameActivityPayload
  updateActivity(attributes: ActivityAttributes!, id: ID!): UpdateActivityPayload
  updatePerson(attributes: PersonAttributes!, id: ID!): UpdatePersonPayload
  updatePreference(id: String!, value: PreferenceValue!): UpdatePreferencePayload
  updateSlot(attributes: SlotAttributes!, id: ID!): UpdateSlotPayload
  updateUser(attributes: UserAttributes!, id: ID): UpdateUserPayload
  userConfirmRegistrationWithToken(confirmationToken: String!): UserConfirmRegistrationWithTokenPayload
  userLogin(email: String!, password: String!): UserLoginPayload
  userLogout: UserLogoutPayload
  userRegister(confirmUrl: String, email: String!, name: String!, password: String!, passwordConfirmation: String!): UserRegisterPayload
  userResendConfirmationWithToken(confirmUrl: String!, email: String!): UserResendConfirmationWithTokenPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

type PageResult implements SearchResult {
  description: String
  id: ID!
  lede: String
  slug: String!
  title: String!
  url: String!
}

enum Permission {
  """
  Manage activities
  """
  activities

  """
  Administrator
  """
  admin

  """
  Manage content
  """
  content

  """
  Manage people
  """
  people

  """
  Manage permissions
  """
  permissions

  """
  Manage registrations
  """
  registrations

  """
  Manage shows
  """
  shows

  """
  Manage social events
  """
  social_events

  """
  Manage workshops
  """
  workshops
}

type PermissionDefinition {
  children: [PermissionDefinition!]
  id: Permission!
  label: String!
}

type Person {
  bio: String!
  city: PlaceName
  country: PlaceName
  id: ID!
  name: String!
  picture: ProfilePicture
  pronouns: String
  user: User
}

input PersonAttributes {
  bio: String
  city: String
  country: Country
  name: String
  picture: Upload
  pronouns: String
}

type PersonResult implements SearchResult {
  description: String
  id: ID!
  person: Person!
  title: String!
  url: String!
}

type PlaceName {
  id: ID!
  name: String!
  traditionalName: String
}

interface Preference {
  description: String!
  id: String!
}

input PreferenceValue {
  boolean: Boolean
  string: String
}

input ProfileMergeAttributes {
  city: ID
  country: ID
  name: ID
  pronouns: ID
}

type ProfilePicture {
  id: ID!

  """
  256x256
  """
  large: String!

  """
  128x128
  """
  medium: String!

  """
  64x64
  """
  small: String!
}

type Query {
  festival(year: String): Festival!
  people: [Person!]
  permissions: [PermissionDefinition!]!
  person(id: ID!): Person
  preference(id: String!): Preference
  search(activityType: ActivityType, limit: Int, only: [SearchType!] = [Activity, Person, Venue, Page], query: String!): [SearchResult!]!
  user(id: ID): User
}

"""
Autogenerated return type of RenameActivity.
"""
type RenameActivityPayload {
  activity: Activity!
}

interface SearchResult {
  description: String
  id: ID!
  title: String!
  url: String!
}

enum SearchType {
  """
  Activity
  """
  Activity

  """
  Page
  """
  Page

  """
  Person
  """
  Person

  """
  Venue
  """
  Venue
}

type Show implements Activity {
  description: String

  """
  Directors
  """
  directors: [Person!]!
  id: ID!
  name: String!
  presenters: [Person!]!
  slots: [Slot!]!
  slug: String!
  type: ActivityType!
}

type Slot {
  activity: Activity
  activityType: ActivityType!
  endsAt: ISO8601DateTime!
  id: ID!
  startsAt: ISO8601DateTime!
  venue: Venue
}

input SlotAttributes {
  activityId: ID
  activityType: ActivityType
  endsAt: ISO8601DateTime
  startsAt: ISO8601DateTime
  venueId: ID
}

type SocialEvent implements Activity {
  description: String
  id: ID!
  name: String!

  """
  Organisers
  """
  organisers: [Person!]!
  presenters: [Person!]!
  slots: [Slot!]!
  slug: String!
  type: ActivityType!
}

type StringPreference implements Preference {
  description: String!
  id: String!
  value: String!
}

input TimeRangeAttributes {
  endsAt: ISO8601DateTime!
  startsAt: ISO8601DateTime!
}

type Timetable {
  id: ID!
  slots: [Slot!]!
}

"""
Autogenerated return type of UpdateActivity.
"""
type UpdateActivityPayload {
  activity: Activity!
}

"""
Autogenerated return type of UpdatePerson.
"""
type UpdatePersonPayload {
  profile: Person!
}

"""
Autogenerated return type of UpdatePreference.
"""
type UpdatePreferencePayload {
  preference: Preference!
}

"""
Autogenerated return type of UpdateSlot.
"""
type UpdateSlotPayload {
  slot: Slot!
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  user: User!
}

scalar Upload

type User {
  email: String!
  id: ID!
  name: String!
  permissions: [Permission!]!
  preferences: [Preference!]!
  profile: Person
}

input UserAttributes {
  email: String
  name: String
  permissions: [Permission!]
}

"""
Autogenerated return type of UserConfirmRegistrationWithToken.
"""
type UserConfirmRegistrationWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Null unless user is signed in after confirmation.
  """
  credentials: Credential
}

"""
Autogenerated return type of UserLogin.
"""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""
Autogenerated return type of UserLogout.
"""
type UserLogoutPayload {
  authenticatable: User!
}

"""
Autogenerated return type of UserRegister.
"""
type UserRegisterPayload {
  authenticatable: User!

  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
}

"""
Autogenerated return type of UserResendConfirmationWithToken.
"""
type UserResendConfirmationWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserSendPasswordResetWithToken.
"""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserUpdatePasswordWithToken.
"""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

type Venue {
  address: String!
  building: String!
  id: ID!
  latitude: Float!
  longitude: Float!
  position: Int!
  room: String
}

type VenueResult implements SearchResult {
  description: String
  id: ID!
  title: String!
  url: String!
  venue: Venue!
}

type Workshop implements Activity {
  description: String
  id: ID!
  name: String!
  presenters: [Person!]!
  slots: [Slot!]!
  slug: String!

  """
  Tutors
  """
  tutors: [Person!]!
  type: ActivityType!
}
