/* eslint-disable */
import { DateTime } from 'luxon';
import { gql } from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Country: { input: string; output: string; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: DateTime; output: DateTime; }
  ISODate: { input: DateTime; output: DateTime; }
  Money: { input: number; output: number; }
  Upload: { input: File; output: File; }
};

export type Activity = {
  bookingLink: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  missingInfo: Array<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  session: Maybe<Session>;
  sessions: Array<Session>;
  slug: Scalars['String']['output'];
  type: ActivityType;
};


export type ActivitySessionArgs = {
  id: Scalars['ID']['input'];
};

export type ActivityAttributes = {
  attachedActivityId: InputMaybe<Scalars['ID']['input']>;
  bookingLink: InputMaybe<Scalars['String']['input']>;
  description: InputMaybe<Scalars['String']['input']>;
  name: InputMaybe<Scalars['String']['input']>;
  picture: InputMaybe<Scalars['Upload']['input']>;
  pictureAltText: InputMaybe<Scalars['String']['input']>;
  profileIds: InputMaybe<Array<Scalars['ID']['input']>>;
  slug: InputMaybe<Scalars['String']['input']>;
  suitability: InputMaybe<Scalars['String']['input']>;
  uploadedPicture: InputMaybe<UploadedFile>;
};

export type ActivityCount = {
  __typename: 'ActivityCount';
  count: Scalars['Int']['output'];
  id: ActivityType;
};

export type ActivityPicture = {
  __typename: 'ActivityPicture';
  altText: Maybe<Scalars['String']['output']>;
  blurhash: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  /** 1920x1080 */
  large: Scalars['String']['output'];
  /** 1280x720 */
  medium: Scalars['String']['output'];
  /** 480x270 */
  small: Scalars['String']['output'];
  /** 48x27 */
  tiny: Scalars['String']['output'];
};

export type ActivityResult = SearchResult & {
  __typename: 'ActivityResult';
  activity: Activity;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export enum ActivityType {
  /** Conference */
  Conference = 'Conference',
  /** Show */
  Show = 'Show',
  /** SocialEvent */
  SocialEvent = 'SocialEvent',
  /** Workshop */
  Workshop = 'Workshop'
}

/** Autogenerated return type of AddPayment. */
export type AddPaymentPayload = {
  __typename: 'AddPaymentPayload';
  payment: Payment;
};

/** Autogenerated return type of AddPreference. */
export type AddPreferencePayload = {
  __typename: 'AddPreferencePayload';
  preference: Preference;
};

/** Autogenerated return type of AddSessionCast. */
export type AddSessionCastPayload = {
  __typename: 'AddSessionCastPayload';
  cast: Person;
  session: Session;
};

/** Autogenerated return type of AddToSession. */
export type AddToSessionPayload = {
  __typename: 'AddToSessionPayload';
  registration: Registration;
  session: Session;
};

/** Autogenerated return type of AddToWaitlist. */
export type AddToWaitlistPayload = {
  __typename: 'AddToWaitlistPayload';
  waitlist: Waitlist;
};

/** Autogenerated return type of AddVoucher. */
export type AddVoucherPayload = {
  __typename: 'AddVoucherPayload';
  voucher: Voucher;
};

export type Appearance = {
  __typename: 'Appearance';
  activity: Activity;
  id: Scalars['ID']['output'];
  role: Role;
  sessions: Array<Session>;
};

/** Autogenerated return type of ApprovePayment. */
export type ApprovePaymentPayload = {
  __typename: 'ApprovePaymentPayload';
  payment: Payment;
};

export type Balance = {
  __typename: 'Balance';
  id: Scalars['ID']['output'];
  paid: Scalars['Money']['output'];
  total: Scalars['Money']['output'];
};

export type BooleanSetting = Setting & {
  __typename: 'BooleanSetting';
  description: Scalars['String']['output'];
  id: Scalars['String']['output'];
  value: Scalars['Boolean']['output'];
};

export type CalendarSession = {
  __typename: 'CalendarSession';
  feedback: Maybe<Feedback>;
  full: Scalars['Boolean']['output'];
  hidden: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  session: Session;
  waitlisted: Scalars['Boolean']['output'];
};

/** Autogenerated return type of CancelPayment. */
export type CancelPaymentPayload = {
  __typename: 'CancelPaymentPayload';
  payment: Payment;
};

export type Cart = {
  __typename: 'Cart';
  discount: Scalars['Money']['output'];
  id: Scalars['ID']['output'];
  outstanding: Scalars['Money']['output'];
  paid: Scalars['Money']['output'];
  total: Scalars['Money']['output'];
  value: Scalars['Money']['output'];
  workshopsCount: Scalars['Int']['output'];
};

export type City = {
  __typename: 'City';
  country: Scalars['Country']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  traditionalNames: Array<Scalars['String']['output']>;
};

export type CityAttributes = {
  country: Scalars['String']['input'];
  name: Scalars['String']['input'];
  traditionalNames: InputMaybe<Array<Scalars['String']['input']>>;
};

export type Conference = Activity & {
  __typename: 'Conference';
  bookingLink: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  missingInfo: Array<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  session: Maybe<Session>;
  sessions: Array<Session>;
  slug: Scalars['String']['output'];
  /** Speakers */
  speakers: Array<Person>;
  type: ActivityType;
};


export type ConferenceSessionArgs = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateActivity. */
export type CreateActivityPayload = {
  __typename: 'CreateActivityPayload';
  activity: Activity;
  session: Maybe<Session>;
};

/** Autogenerated return type of CreateDonation. */
export type CreateDonationPayload = {
  __typename: 'CreateDonationPayload';
  donation: Donation;
  paymentIntentSecret: Scalars['String']['output'];
};

/** Autogenerated return type of CreateDonationPayment. */
export type CreateDonationPaymentPayload = {
  __typename: 'CreateDonationPaymentPayload';
  donation: Donation;
  paymentIntentSecret: Scalars['String']['output'];
};

/** Autogenerated return type of CreateMultipleSessions. */
export type CreateMultipleSessionsPayload = {
  __typename: 'CreateMultipleSessionsPayload';
  sessions: Array<Session>;
};

/** Autogenerated return type of CreatePerson. */
export type CreatePersonPayload = {
  __typename: 'CreatePersonPayload';
  profile: Person;
};

/** Autogenerated return type of CreateSession. */
export type CreateSessionPayload = {
  __typename: 'CreateSessionPayload';
  session: Session;
};

/** Autogenerated return type of CreateTranslation. */
export type CreateTranslationPayload = {
  __typename: 'CreateTranslationPayload';
  translation: Translation;
};

export type Credential = {
  __typename: 'Credential';
  accessToken: Scalars['String']['output'];
  client: Scalars['String']['output'];
  expiry: Scalars['Int']['output'];
  tokenType: Scalars['String']['output'];
  uid: Scalars['String']['output'];
};

export type CreditCardPayment = Payment & {
  __typename: 'CreditCardPayment';
  amount: Scalars['Money']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  reference: Scalars['String']['output'];
  registration: Registration;
  state: PaymentState;
  type: PaymentType;
};

export type Dashboard = {
  __typename: 'Dashboard';
  id: Scalars['ID']['output'];
  income: Value;
  registrations: Value;
  workshopPlaces: Value;
};

/** Autogenerated return type of DemoteSessionParticipant. */
export type DemoteSessionParticipantPayload = {
  __typename: 'DemoteSessionParticipantPayload';
  session: Session;
};

export type Donation = {
  __typename: 'Donation';
  amount: Scalars['Money']['output'];
  anonymous: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  message: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  newsletter: Scalars['Boolean']['output'];
};

export type Feedback = {
  __typename: 'Feedback';
  constructive: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  positive: Scalars['String']['output'];
  rating: Maybe<Scalars['Int']['output']>;
  registration: Registration;
  session: Session;
  testimonial: Scalars['String']['output'];
};

export type FeedbackAttributes = {
  constructive: InputMaybe<Scalars['String']['input']>;
  positive: InputMaybe<Scalars['String']['input']>;
  rating: InputMaybe<Scalars['Int']['input']>;
  testimonial: InputMaybe<Scalars['String']['input']>;
};

export type Festival = {
  __typename: 'Festival';
  activities: Array<Activity>;
  activity: Maybe<Activity>;
  activityCounts: Array<ActivityCount>;
  balance: Balance;
  earlybirdClosesAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  earlybirdOpensAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  endDate: Scalars['ISODate']['output'];
  generalOpensAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  payments: Maybe<Array<Payment>>;
  people: Array<Person>;
  registrationPhase: RegistrationPhase;
  registrations: Array<Registration>;
  session: Session;
  slots: Array<Slot>;
  startDate: Scalars['ISODate']['output'];
  state: FestivalState;
  teamMembers: Array<User>;
  timetable: Timetable;
  venues: Array<Venue>;
  workshopAllocation: Maybe<WorkshopAllocation>;
  workshopPricing: Pricing;
  workshopTotal: Scalars['Money']['output'];
  workshops: Array<Workshop>;
};


export type FestivalActivitiesArgs = {
  type: InputMaybe<ActivityType>;
};


export type FestivalActivityArgs = {
  slug: Scalars['String']['input'];
  type: ActivityType;
};


export type FestivalRegistrationsArgs = {
  name: InputMaybe<Scalars['String']['input']>;
};


export type FestivalSessionArgs = {
  id: Scalars['ID']['input'];
};


export type FestivalSlotsArgs = {
  type: InputMaybe<ActivityType>;
};

export enum FestivalState {
  /** In the past */
  Finished = 'Finished',
  /** Happening right now */
  Happening = 'Happening',
  /** In the future */
  Upcoming = 'Upcoming'
}

export type InternetBankingPayment = Payment & {
  __typename: 'InternetBankingPayment';
  amount: Scalars['Money']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  reference: Scalars['String']['output'];
  registration: Registration;
  state: PaymentState;
  type: PaymentType;
};

/** Autogenerated return type of JobProgress. */
export type JobProgressPayload = {
  __typename: 'JobProgressPayload';
  error: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  progress: Scalars['Int']['output'];
  state: JobState;
  total: Scalars['Int']['output'];
};

export enum JobState {
  /** Job is completed */
  Completed = 'completed',
  /** Job has failed */
  Failed = 'failed',
  /** Job is pending */
  Pending = 'pending',
  /** Job is working */
  Working = 'working'
}

/** Autogenerated return type of MergePeople. */
export type MergePeoplePayload = {
  __typename: 'MergePeoplePayload';
  profile: Person;
};

export type Message = {
  __typename: 'Message';
  content: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  sender: User;
  subject: Maybe<Scalars['String']['output']>;
};

/** Autogenerated return type of MoveActivity. */
export type MoveActivityPayload = {
  __typename: 'MoveActivityPayload';
  activity: Activity;
};

/** Autogenerated return type of MoveAllocatedParticipant. */
export type MoveAllocatedParticipantPayload = {
  __typename: 'MoveAllocatedParticipantPayload';
  affectedSessions: Array<WorkshopAllocationSession>;
};

/** Autogenerated return type of MoveWaitlistParticipant. */
export type MoveWaitlistParticipantPayload = {
  __typename: 'MoveWaitlistParticipantPayload';
  waitlist: Array<Waitlist>;
};

export type MultipleSessionAttributes = {
  activityId: InputMaybe<Scalars['ID']['input']>;
  activityType: ActivityType;
  capacity: InputMaybe<Scalars['Int']['input']>;
  festivalId: Scalars['ID']['input'];
  timeRanges: Array<TimeRangeAttributes>;
  venueIds: Array<Scalars['ID']['input']>;
};

export type Mutation = {
  __typename: 'Mutation';
  addPayment: Maybe<AddPaymentPayload>;
  addPreference: Maybe<AddPreferencePayload>;
  addSessionCast: Maybe<AddSessionCastPayload>;
  addToSession: Maybe<AddToSessionPayload>;
  addToWaitlist: Maybe<AddToWaitlistPayload>;
  addVoucher: Maybe<AddVoucherPayload>;
  allocateWorkshops: Maybe<AllocateWorkshopsPayload>;
  approvePayment: Maybe<ApprovePaymentPayload>;
  cancelPayment: Maybe<CancelPaymentPayload>;
  createActivity: Maybe<CreateActivityPayload>;
  createDonation: Maybe<CreateDonationPayload>;
  createDonationPayment: Maybe<CreateDonationPaymentPayload>;
  createPerson: Maybe<CreatePersonPayload>;
  createSession: Maybe<CreateSessionPayload>;
  createSessions: Maybe<CreateMultipleSessionsPayload>;
  createTranslation: Maybe<CreateTranslationPayload>;
  demoteSessionParticipant: Maybe<DemoteSessionParticipantPayload>;
  destroySession: Maybe<Scalars['Boolean']['output']>;
  destroyTranslation: Maybe<Scalars['Boolean']['output']>;
  finaliseRegistration: Maybe<FinaliseRegistrationPayload>;
  mergePeople: Maybe<MergePeoplePayload>;
  moveActivity: Maybe<MoveActivityPayload>;
  moveAllocatedParticipant: Maybe<MoveAllocatedParticipantPayload>;
  moveWaitlistParticipant: Maybe<MoveWaitlistParticipantPayload>;
  promiseInternetBankingPayment: Maybe<PromiseInternetBankingPaymentPayload>;
  promoteWaitlistParticipant: Maybe<PromoteWaitlistParticipantPayload>;
  removeFromSession: Maybe<RemoveFromSessionPayload>;
  removeFromWaitlist: Maybe<Scalars['Boolean']['output']>;
  removePreference: Maybe<Scalars['Boolean']['output']>;
  removeSessionCast: Maybe<Scalars['Boolean']['output']>;
  renameActivity: Maybe<RenameActivityPayload>;
  resetPasswordAndLogIn: Maybe<ResetPasswordAndLogInPayload>;
  saveFeedback: Maybe<SaveFeedbackPayload>;
  sendMessage: Maybe<SendMessagePayload>;
  setSessionVisibility: Maybe<CalendarSession>;
  updateActivity: Maybe<UpdateActivityPayload>;
  updatePayment: Maybe<UpdatePaymentPayload>;
  updatePerson: Maybe<UpdatePersonPayload>;
  updatePreferences: Maybe<UpdatePreferencesPayload>;
  updateProfile: Maybe<Person>;
  updateRegistration: Maybe<UpdatePayload>;
  updateRegistrationUserDetails: Maybe<UpdateUserDetailsPayload>;
  updateSession: Maybe<UpdateSessionPayload>;
  updateSetting: Maybe<UpdateSettingPayload>;
  updateTranslation: Maybe<UpdateTranslationPayload>;
  updateUser: Maybe<UpdateUserPayload>;
  updateWorkshops: Maybe<UpdateWorkshopsPayload>;
  userConfirmRegistrationWithToken: Maybe<UserConfirmRegistrationWithTokenPayload>;
  userLogin: Maybe<UserLoginPayload>;
  userLogout: Maybe<UserLogoutPayload>;
  userRegister: Maybe<UserRegisterPayload>;
  userResendConfirmationWithToken: Maybe<UserResendConfirmationWithTokenPayload>;
  userSendPasswordResetWithToken: Maybe<UserSendPasswordResetWithTokenPayload>;
  userUpdatePasswordWithToken: Maybe<UserUpdatePasswordWithTokenPayload>;
};


export type MutationAddPaymentArgs = {
  amount: Scalars['Money']['input'];
  createdAt: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  registrationId: Scalars['ID']['input'];
  state?: InputMaybe<PaymentState>;
  type?: InputMaybe<PaymentType>;
};


export type MutationAddPreferenceArgs = {
  registrationId: InputMaybe<Scalars['ID']['input']>;
  sessionId: Scalars['ID']['input'];
};


export type MutationAddSessionCastArgs = {
  profileId: Scalars['ID']['input'];
  role: Role;
  sessionId: Scalars['ID']['input'];
};


export type MutationAddToSessionArgs = {
  registrationId: InputMaybe<Scalars['ID']['input']>;
  sessionId: Scalars['ID']['input'];
};


export type MutationAddToWaitlistArgs = {
  position: InputMaybe<Scalars['Int']['input']>;
  registrationId: InputMaybe<Scalars['ID']['input']>;
  sessionId: Scalars['ID']['input'];
};


export type MutationAddVoucherArgs = {
  registrationId: Scalars['ID']['input'];
  workshops: Scalars['Int']['input'];
};


export type MutationApprovePaymentArgs = {
  id: Scalars['ID']['input'];
};


export type MutationCancelPaymentArgs = {
  id: Scalars['ID']['input'];
};


export type MutationCreateActivityArgs = {
  attributes: ActivityAttributes;
  festivalId: InputMaybe<Scalars['ID']['input']>;
  sessionId: InputMaybe<Scalars['ID']['input']>;
  type: ActivityType;
};


export type MutationCreateDonationArgs = {
  amountCents: Scalars['Int']['input'];
  anonymous?: InputMaybe<Scalars['Boolean']['input']>;
  email: Scalars['String']['input'];
  message: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  newsletter?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateDonationPaymentArgs = {
  id: Scalars['ID']['input'];
};


export type MutationCreatePersonArgs = {
  attributes: PersonAttributes;
};


export type MutationCreateSessionArgs = {
  attributes: SessionAttributes;
  festivalId: Scalars['ID']['input'];
};


export type MutationCreateSessionsArgs = {
  attributes: MultipleSessionAttributes;
};


export type MutationCreateTranslationArgs = {
  name: Scalars['String']['input'];
  traditionalName: Scalars['String']['input'];
};


export type MutationDemoteSessionParticipantArgs = {
  position: Scalars['Int']['input'];
  registrationId: Scalars['ID']['input'];
  sessionId: Scalars['ID']['input'];
};


export type MutationDestroySessionArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDestroyTranslationArgs = {
  id: Scalars['ID']['input'];
};


export type MutationMergePeopleArgs = {
  attributes: ProfileMergeAttributes;
  profileIds: Array<Scalars['ID']['input']>;
};


export type MutationMoveActivityArgs = {
  id: Scalars['ID']['input'];
  slug: Scalars['String']['input'];
};


export type MutationMoveAllocatedParticipantArgs = {
  newSessionId?: InputMaybe<Scalars['ID']['input']>;
  oldSessionId?: InputMaybe<Scalars['ID']['input']>;
  registrationId: Scalars['ID']['input'];
  waitlist?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationMoveWaitlistParticipantArgs = {
  position: Scalars['Int']['input'];
  registrationId: Scalars['ID']['input'];
  sessionId: Scalars['ID']['input'];
};


export type MutationPromiseInternetBankingPaymentArgs = {
  amount: Scalars['Money']['input'];
  registrationId: Scalars['ID']['input'];
};


export type MutationPromoteWaitlistParticipantArgs = {
  registrationId: Scalars['ID']['input'];
  sessionId: Scalars['ID']['input'];
};


export type MutationRemoveFromSessionArgs = {
  promote: InputMaybe<Scalars['Boolean']['input']>;
  registrationId: InputMaybe<Scalars['ID']['input']>;
  sessionId: Scalars['ID']['input'];
};


export type MutationRemoveFromWaitlistArgs = {
  registrationId: InputMaybe<Scalars['ID']['input']>;
  sessionId: Scalars['ID']['input'];
};


export type MutationRemovePreferenceArgs = {
  registrationId: InputMaybe<Scalars['ID']['input']>;
  sessionId: Scalars['ID']['input'];
};


export type MutationRemoveSessionCastArgs = {
  profileId: Scalars['ID']['input'];
  role: Role;
  sessionId: Scalars['ID']['input'];
};


export type MutationRenameActivityArgs = {
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
};


export type MutationResetPasswordAndLogInArgs = {
  password: Scalars['String']['input'];
  passwordConfirmation: Scalars['String']['input'];
  resetPasswordToken: Scalars['String']['input'];
};


export type MutationSaveFeedbackArgs = {
  attributes: FeedbackAttributes;
  sessionId: Scalars['ID']['input'];
};


export type MutationSendMessageArgs = {
  content: Scalars['String']['input'];
  sessionId: Scalars['ID']['input'];
  subject: Scalars['String']['input'];
};


export type MutationSetSessionVisibilityArgs = {
  hidden: Scalars['Boolean']['input'];
  sessionId: Scalars['ID']['input'];
};


export type MutationUpdateActivityArgs = {
  attributes: ActivityAttributes;
  id: Scalars['ID']['input'];
};


export type MutationUpdatePaymentArgs = {
  attributes: PaymentAttributes;
  id: Scalars['ID']['input'];
};


export type MutationUpdatePersonArgs = {
  attributes: PersonAttributes;
  id: Scalars['ID']['input'];
};


export type MutationUpdatePreferencesArgs = {
  preferences: Array<PreferenceAttributes>;
};


export type MutationUpdateProfileArgs = {
  attributes: ProfileAttributes;
};


export type MutationUpdateRegistrationArgs = {
  attributes: RegistrationAttributes;
};


export type MutationUpdateRegistrationUserDetailsArgs = {
  attributes: UserDetailsAttributes;
  registrationId: InputMaybe<Scalars['ID']['input']>;
};


export type MutationUpdateSessionArgs = {
  attributes: SessionAttributes;
  id: Scalars['ID']['input'];
};


export type MutationUpdateSettingArgs = {
  id: Scalars['String']['input'];
  value: SettingValue;
};


export type MutationUpdateTranslationArgs = {
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  traditionalName: Scalars['String']['input'];
};


export type MutationUpdateUserArgs = {
  attributes: UserAttributes;
  id: InputMaybe<Scalars['ID']['input']>;
};


export type MutationUpdateWorkshopsArgs = {
  sessionIds: Array<Scalars['ID']['input']>;
  waitlistIds: Array<Scalars['ID']['input']>;
};


export type MutationUserConfirmRegistrationWithTokenArgs = {
  confirmationToken: Scalars['String']['input'];
};


export type MutationUserLoginArgs = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type MutationUserRegisterArgs = {
  confirmUrl: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  password: Scalars['String']['input'];
  passwordConfirmation: Scalars['String']['input'];
};


export type MutationUserResendConfirmationWithTokenArgs = {
  confirmUrl: Scalars['String']['input'];
  email: Scalars['String']['input'];
};


export type MutationUserSendPasswordResetWithTokenArgs = {
  email: Scalars['String']['input'];
  redirectUrl: Scalars['String']['input'];
};


export type MutationUserUpdatePasswordWithTokenArgs = {
  password: Scalars['String']['input'];
  passwordConfirmation: Scalars['String']['input'];
  resetPasswordToken: Scalars['String']['input'];
};

export type PageResult = SearchResult & {
  __typename: 'PageResult';
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lede: Maybe<Scalars['String']['output']>;
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type Payment = {
  amount: Scalars['Money']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  reference: Scalars['String']['output'];
  registration: Registration;
  state: PaymentState;
  type: PaymentType;
};

export type PaymentAttributes = {
  state: InputMaybe<PaymentState>;
};

export type PaymentIntent = {
  __typename: 'PaymentIntent';
  clientSecret: Maybe<Scalars['String']['output']>;
  error: Maybe<Scalars['String']['output']>;
};

export enum PaymentState {
  /** Approved */
  Approved = 'Approved',
  /** Cancelled */
  Cancelled = 'Cancelled',
  /** Failed */
  Failed = 'Failed',
  /** Pending */
  Pending = 'Pending'
}

export enum PaymentType {
  /** CreditCardPayment */
  CreditCardPayment = 'CreditCardPayment',
  /** InternetBankingPayment */
  InternetBankingPayment = 'InternetBankingPayment',
  /** Refund */
  Refund = 'Refund',
  /** Voucher */
  Voucher = 'Voucher'
}

export enum Permission {
  /** Manage activities */
  Activities = 'activities',
  /** Administrator */
  Admin = 'admin',
  /** Manage content */
  Content = 'content',
  /** Manage payments */
  Payments = 'payments',
  /** Manage people */
  People = 'people',
  /** Manage permissions */
  Permissions = 'permissions',
  /** Manage registrations */
  Registrations = 'registrations',
  /** Manage shows */
  Shows = 'shows',
  /** Manage social events */
  SocialEvents = 'social_events',
  /** Team member */
  TeamMember = 'team_member',
  /** Manage workshops */
  Workshops = 'workshops'
}

export type PermissionDefinition = {
  __typename: 'PermissionDefinition';
  children: Maybe<Array<PermissionDefinition>>;
  id: Permission;
  label: Scalars['String']['output'];
};

export type Person = {
  __typename: 'Person';
  appearances: Array<Appearance>;
  bio: Scalars['String']['output'];
  city: Maybe<City>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  phone: Maybe<Scalars['String']['output']>;
  picture: Maybe<ProfilePicture>;
  pronouns: Maybe<Scalars['String']['output']>;
  user: Maybe<User>;
};

export type PersonAttributes = {
  bio: InputMaybe<Scalars['String']['input']>;
  city: InputMaybe<CityAttributes>;
  name: InputMaybe<Scalars['String']['input']>;
  phone: InputMaybe<Scalars['String']['input']>;
  picture: InputMaybe<Scalars['Upload']['input']>;
  pronouns: InputMaybe<Scalars['String']['input']>;
  uploadedPicture: InputMaybe<UploadedFile>;
};

export type PersonResult = SearchResult & {
  __typename: 'PersonResult';
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  person: Person;
  title: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type Preference = {
  __typename: 'Preference';
  id: Scalars['ID']['output'];
  position: Scalars['Int']['output'];
  session: Session;
  sessionId: Scalars['ID']['output'];
  workshop: Workshop;
  workshopId: Scalars['ID']['output'];
};

export type PreferenceAttributes = {
  position: Scalars['Int']['input'];
  sessionId: Scalars['ID']['input'];
};

export type Pricing = {
  __typename: 'Pricing';
  baseWorkshopPrice: Scalars['Money']['output'];
  discountLimit: Scalars['Int']['output'];
  discountPerAdditionalWorkshop: Scalars['Money']['output'];
  id: Scalars['ID']['output'];
};

export type ProfileAttributes = {
  bio: InputMaybe<Scalars['String']['input']>;
  city: InputMaybe<CityAttributes>;
  email: InputMaybe<Scalars['String']['input']>;
  name: InputMaybe<Scalars['String']['input']>;
  phone: InputMaybe<Scalars['String']['input']>;
  picture: InputMaybe<Scalars['Upload']['input']>;
  pronouns: InputMaybe<Scalars['String']['input']>;
  uploadedPicture: InputMaybe<UploadedFile>;
};

export type ProfileMergeAttributes = {
  city: InputMaybe<Scalars['ID']['input']>;
  country: InputMaybe<Scalars['ID']['input']>;
  name: InputMaybe<Scalars['ID']['input']>;
  pronouns: InputMaybe<Scalars['ID']['input']>;
};

export type ProfilePicture = {
  __typename: 'ProfilePicture';
  id: Scalars['ID']['output'];
  /** 256x256 */
  large: Scalars['String']['output'];
  /** 128x128 */
  medium: Scalars['String']['output'];
  /** 64x64 */
  small: Scalars['String']['output'];
};

/** Autogenerated return type of PromiseInternetBankingPayment. */
export type PromiseInternetBankingPaymentPayload = {
  __typename: 'PromiseInternetBankingPaymentPayload';
  payment: Payment;
};

/** Autogenerated return type of PromoteWaitlistParticipant. */
export type PromoteWaitlistParticipantPayload = {
  __typename: 'PromoteWaitlistParticipantPayload';
  registration: Registration;
};

export type Query = {
  __typename: 'Query';
  calendar: Array<CalendarSession>;
  cities: Array<City>;
  dashboard: Dashboard;
  directoryResult: Maybe<Session>;
  directorySearch: Array<Person>;
  donations: Array<Donation>;
  festival: Festival;
  payment: Payment;
  people: Maybe<Array<Person>>;
  permissions: Array<PermissionDefinition>;
  person: Maybe<Person>;
  registration: Registration;
  search: Array<SearchResult>;
  session: Session;
  setting: Maybe<Setting>;
  translations: Array<Translation>;
  user: Maybe<User>;
};


export type QueryDirectoryResultArgs = {
  id: Scalars['ID']['input'];
  time: Scalars['ISO8601DateTime']['input'];
};


export type QueryDirectorySearchArgs = {
  query: Scalars['String']['input'];
};


export type QueryFestivalArgs = {
  year: InputMaybe<Scalars['String']['input']>;
};


export type QueryPaymentArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPersonArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRegistrationArgs = {
  id: InputMaybe<Scalars['ID']['input']>;
};


export type QuerySearchArgs = {
  activityType: InputMaybe<ActivityType>;
  limit: InputMaybe<Scalars['Int']['input']>;
  only?: InputMaybe<Array<SearchType>>;
  query: Scalars['String']['input'];
};


export type QuerySessionArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySettingArgs = {
  id: Scalars['String']['input'];
};


export type QueryUserArgs = {
  id: InputMaybe<Scalars['ID']['input']>;
};

export type Refund = Payment & {
  __typename: 'Refund';
  amount: Scalars['Money']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  reference: Scalars['String']['output'];
  registration: Registration;
  state: PaymentState;
  type: PaymentType;
};

export type Registration = {
  __typename: 'Registration';
  cart: Maybe<Cart>;
  codeOfConductAcceptedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  completedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  donateDiscount: Scalars['Boolean']['output'];
  feedback: Array<Feedback>;
  id: Scalars['ID']['output'];
  outstanding: Scalars['Money']['output'];
  paymentIntent: Maybe<PaymentIntent>;
  payments: Array<Payment>;
  photoPermission: Scalars['Boolean']['output'];
  preferences: Array<Preference>;
  sessions: Array<Session>;
  showExplainer: Scalars['Boolean']['output'];
  teaching: Array<Session>;
  user: Maybe<User>;
  waitlist: Array<Session>;
  workshopsCount: Scalars['Int']['output'];
};


export type RegistrationPaymentIntentArgs = {
  amount: Scalars['Money']['input'];
};

export type RegistrationAttributes = {
  codeOfConductAcceptedAt: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  donateDiscount: InputMaybe<Scalars['Boolean']['input']>;
  photoPermission: InputMaybe<Scalars['Boolean']['input']>;
};

export enum RegistrationPhase {
  /** Closed */
  Closed = 'Closed',
  /** Earlybird */
  Earlybird = 'Earlybird',
  /** General */
  General = 'General',
  /** Paused */
  Paused = 'Paused',
  /** Pending */
  Pending = 'Pending'
}

/** Autogenerated return type of Registrations. */
export type RegistrationsPayload = {
  __typename: 'RegistrationsPayload';
  count: Scalars['Int']['output'];
};

/** Autogenerated return type of RemoveFromSession. */
export type RemoveFromSessionPayload = {
  __typename: 'RemoveFromSessionPayload';
  registration: Registration;
  session: Session;
};

/** Autogenerated return type of RenameActivity. */
export type RenameActivityPayload = {
  __typename: 'RenameActivityPayload';
  activity: Activity;
};

/** Autogenerated return type of ResetPasswordAndLogIn. */
export type ResetPasswordAndLogInPayload = {
  __typename: 'ResetPasswordAndLogInPayload';
  authenticatable: User;
  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */
  credentials: Maybe<Credential>;
};

export enum Role {
  /** director */
  Director = 'director',
  /** host */
  Host = 'host',
  /** muso */
  Muso = 'muso',
  /** operator */
  Operator = 'operator',
  /** organiser */
  Organiser = 'organiser',
  /** performer */
  Performer = 'performer',
  /** scorekeeper */
  Scorekeeper = 'scorekeeper',
  /** speaker */
  Speaker = 'speaker',
  /** support */
  Support = 'support',
  /** tutor */
  Tutor = 'tutor'
}

/** Autogenerated return type of SaveFeedback. */
export type SaveFeedbackPayload = {
  __typename: 'SaveFeedbackPayload';
  feedback: Feedback;
};

export type SearchResult = {
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export enum SearchType {
  /** Activity */
  Activity = 'Activity',
  /** Page */
  Page = 'Page',
  /** Person */
  Person = 'Person',
  /** Venue */
  Venue = 'Venue'
}

/** Autogenerated return type of SendMessage. */
export type SendMessagePayload = {
  __typename: 'SendMessagePayload';
  message: Message;
};

export type Session = {
  __typename: 'Session';
  activity: Maybe<Activity>;
  activityType: ActivityType;
  capacity: Maybe<Scalars['Int']['output']>;
  count: Scalars['Int']['output'];
  endsAt: Scalars['ISO8601DateTime']['output'];
  full: Scalars['Boolean']['output'];
  hosts: Array<Person>;
  id: Scalars['ID']['output'];
  messages: Array<Message>;
  musos: Array<Person>;
  operators: Array<Person>;
  participants: Array<Registration>;
  performers: Array<Person>;
  slot: Slot;
  slots: Array<Slot>;
  startsAt: Scalars['ISO8601DateTime']['output'];
  venue: Maybe<Venue>;
  waitlist: Array<Registration>;
  workshop: Maybe<Workshop>;
};

export type SessionAttributes = {
  activityId: InputMaybe<Scalars['ID']['input']>;
  activityType: InputMaybe<ActivityType>;
  capacity: InputMaybe<Scalars['Int']['input']>;
  endsAt: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  startsAt: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  venueId: InputMaybe<Scalars['ID']['input']>;
};

export type Setting = {
  description: Scalars['String']['output'];
  id: Scalars['String']['output'];
};

export type SettingValue = {
  boolean: InputMaybe<Scalars['Boolean']['input']>;
  string: InputMaybe<Scalars['String']['input']>;
};

export type Show = Activity & {
  __typename: 'Show';
  bookingLink: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  /** Directors */
  directors: Array<Person>;
  id: Scalars['ID']['output'];
  missingInfo: Array<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  session: Maybe<Session>;
  sessions: Array<Session>;
  slug: Scalars['String']['output'];
  type: ActivityType;
  workshop: Maybe<Workshop>;
};


export type ShowSessionArgs = {
  id: Scalars['ID']['input'];
};

export type Slot = {
  __typename: 'Slot';
  endsAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  sessions: Array<Session>;
  startsAt: Scalars['ISO8601DateTime']['output'];
  workshops: Array<Workshop>;
};


export type SlotSessionsArgs = {
  type: InputMaybe<ActivityType>;
};

export type SocialEvent = Activity & {
  __typename: 'SocialEvent';
  bookingLink: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  missingInfo: Array<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  /** Organisers */
  organisers: Array<Person>;
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  session: Maybe<Session>;
  sessions: Array<Session>;
  slug: Scalars['String']['output'];
  type: ActivityType;
};


export type SocialEventSessionArgs = {
  id: Scalars['ID']['input'];
};

export type StringSetting = Setting & {
  __typename: 'StringSetting';
  description: Scalars['String']['output'];
  id: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type Subscription = {
  __typename: 'Subscription';
  jobProgress: JobProgressPayload;
  registrations: RegistrationsPayload;
};


export type SubscriptionJobProgressArgs = {
  id: Scalars['ID']['input'];
  jobName: Scalars['String']['input'];
};


export type SubscriptionRegistrationsArgs = {
  year: Scalars['ID']['input'];
};

export type TimeRangeAttributes = {
  endsAt: Scalars['ISO8601DateTime']['input'];
  startsAt: Scalars['ISO8601DateTime']['input'];
};

export type Timetable = {
  __typename: 'Timetable';
  id: Scalars['ID']['output'];
  sessions: Array<Session>;
};

export type Translation = {
  __typename: 'Translation';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  traditionalName: Scalars['String']['output'];
};

/** Autogenerated return type of UpdateActivity. */
export type UpdateActivityPayload = {
  __typename: 'UpdateActivityPayload';
  activity: Activity;
};

/** Autogenerated return type of Update. */
export type UpdatePayload = {
  __typename: 'UpdatePayload';
  registration: Maybe<Registration>;
};

/** Autogenerated return type of UpdatePayment. */
export type UpdatePaymentPayload = {
  __typename: 'UpdatePaymentPayload';
  payment: Payment;
};

/** Autogenerated return type of UpdatePerson. */
export type UpdatePersonPayload = {
  __typename: 'UpdatePersonPayload';
  profile: Person;
};

/** Autogenerated return type of UpdateSession. */
export type UpdateSessionPayload = {
  __typename: 'UpdateSessionPayload';
  session: Session;
};

/** Autogenerated return type of UpdateSetting. */
export type UpdateSettingPayload = {
  __typename: 'UpdateSettingPayload';
  setting: Setting;
};

/** Autogenerated return type of UpdateTranslation. */
export type UpdateTranslationPayload = {
  __typename: 'UpdateTranslationPayload';
  translation: Translation;
};

/** Autogenerated return type of UpdateUserDetails. */
export type UpdateUserDetailsPayload = {
  __typename: 'UpdateUserDetailsPayload';
  registration: Registration;
};

/** Autogenerated return type of UpdateUser. */
export type UpdateUserPayload = {
  __typename: 'UpdateUserPayload';
  user: User;
};

/** Autogenerated return type of UpdateWorkshops. */
export type UpdateWorkshopsPayload = {
  __typename: 'UpdateWorkshopsPayload';
  registration: Registration;
};

export type UploadedFile = {
  filename: Scalars['String']['input'];
  id: Scalars['String']['input'];
  mimeType: InputMaybe<Scalars['String']['input']>;
  size: Scalars['Int']['input'];
};

export type User = {
  __typename: 'User';
  activities: Array<Activity>;
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  permissions: Array<Permission>;
  profile: Maybe<Person>;
  registration: Maybe<Registration>;
  settings: Array<Setting>;
};

export type UserAttributes = {
  email: InputMaybe<Scalars['String']['input']>;
  name: InputMaybe<Scalars['String']['input']>;
  password: InputMaybe<Scalars['String']['input']>;
  passwordConfirmation: InputMaybe<Scalars['String']['input']>;
  permissions: InputMaybe<Array<Permission>>;
};

/** Autogenerated return type of UserConfirmRegistrationWithToken. */
export type UserConfirmRegistrationWithTokenPayload = {
  __typename: 'UserConfirmRegistrationWithTokenPayload';
  authenticatable: User;
  /** Authentication credentials. Null unless user is signed in after confirmation. */
  credentials: Maybe<Credential>;
};

export type UserDetailsAttributes = {
  city: InputMaybe<Scalars['String']['input']>;
  codeOfConductAcceptedAt: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  country: InputMaybe<Scalars['String']['input']>;
  email: InputMaybe<Scalars['String']['input']>;
  name: InputMaybe<Scalars['String']['input']>;
  phone: InputMaybe<Scalars['String']['input']>;
  photoPermission: InputMaybe<Scalars['Boolean']['input']>;
  pronouns: InputMaybe<Scalars['String']['input']>;
  showExplainer: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UserLogin. */
export type UserLoginPayload = {
  __typename: 'UserLoginPayload';
  authenticatable: User;
  credentials: Credential;
};

/** Autogenerated return type of UserLogout. */
export type UserLogoutPayload = {
  __typename: 'UserLogoutPayload';
  authenticatable: User;
};

/** Autogenerated return type of UserRegister. */
export type UserRegisterPayload = {
  __typename: 'UserRegisterPayload';
  authenticatable: User;
  /**
   * Authentication credentials. Null if after signUp resource is not active for
   * authentication (e.g. Email confirmation required).
   */
  credentials: Maybe<Credential>;
};

/** Autogenerated return type of UserResendConfirmationWithToken. */
export type UserResendConfirmationWithTokenPayload = {
  __typename: 'UserResendConfirmationWithTokenPayload';
  message: Scalars['String']['output'];
};

/** Autogenerated return type of UserSendPasswordResetWithToken. */
export type UserSendPasswordResetWithTokenPayload = {
  __typename: 'UserSendPasswordResetWithTokenPayload';
  message: Scalars['String']['output'];
};

/** Autogenerated return type of UserUpdatePasswordWithToken. */
export type UserUpdatePasswordWithTokenPayload = {
  __typename: 'UserUpdatePasswordWithTokenPayload';
  authenticatable: User;
  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */
  credentials: Maybe<Credential>;
};

export type Value = {
  __typename: 'Value';
  current: Scalars['Int']['output'];
  max: Scalars['Int']['output'];
};

export type Venue = {
  __typename: 'Venue';
  address: Scalars['String']['output'];
  building: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  latitude: Scalars['Float']['output'];
  longitude: Scalars['Float']['output'];
  position: Scalars['Int']['output'];
  room: Maybe<Scalars['String']['output']>;
};

export type VenueResult = SearchResult & {
  __typename: 'VenueResult';
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  url: Scalars['String']['output'];
  venue: Venue;
};

export type Voucher = Payment & {
  __typename: 'Voucher';
  amount: Scalars['Money']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  reference: Scalars['String']['output'];
  registration: Registration;
  state: PaymentState;
  type: PaymentType;
  workshops: Scalars['Int']['output'];
};

export type Waitlist = {
  __typename: 'Waitlist';
  id: Scalars['ID']['output'];
  offeredAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  position: Scalars['Int']['output'];
  registration: Registration;
  session: Maybe<Session>;
};

export type Workshop = Activity & {
  __typename: 'Workshop';
  bookingLink: Maybe<Scalars['String']['output']>;
  capacity: Scalars['Int']['output'];
  description: Maybe<Scalars['String']['output']>;
  feedback: Array<Feedback>;
  id: Scalars['ID']['output'];
  missingInfo: Array<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  session: Maybe<Session>;
  sessions: Array<Session>;
  show: Maybe<Show>;
  slug: Scalars['String']['output'];
  stats: WorkshopStat;
  suitability: Maybe<Scalars['String']['output']>;
  /** Tutors */
  tutors: Array<Person>;
  type: ActivityType;
};


export type WorkshopSessionArgs = {
  id: Scalars['ID']['input'];
};

export type WorkshopAllocation = {
  __typename: 'WorkshopAllocation';
  id: Scalars['ID']['output'];
  score: Maybe<Scalars['Float']['output']>;
  sessions: Array<WorkshopAllocationSession>;
  state: JobState;
};

export type WorkshopAllocationSession = {
  __typename: 'WorkshopAllocationSession';
  capacity: Scalars['Int']['output'];
  endsAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  registrations: Array<Registration>;
  slots: Array<Slot>;
  startsAt: Scalars['ISO8601DateTime']['output'];
  waitlist: Array<Registration>;
  workshop: Workshop;
};

export type WorkshopStat = {
  __typename: 'WorkshopStat';
  counts: Array<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
};

/** Autogenerated return type of allocateWorkshops. */
export type AllocateWorkshopsPayload = {
  __typename: 'allocateWorkshopsPayload';
  workshopAllocation: WorkshopAllocation;
};

/** Autogenerated return type of finaliseRegistration. */
export type FinaliseRegistrationPayload = {
  __typename: 'finaliseRegistrationPayload';
  registration: Registration;
};

/** Autogenerated return type of updatePreferences. */
export type UpdatePreferencesPayload = {
  __typename: 'updatePreferencesPayload';
  registration: Registration;
};

import { dateTimePolicy, datePolicy } from './policies/dateTimePolicy';

export const scalarTypePolicies = {
  CreditCardPayment: { fields: { createdAt: dateTimePolicy } },
  Donation: { fields: { createdAt: dateTimePolicy } },
  Festival: {
    fields: {
      earlybirdClosesAt: dateTimePolicy,
      earlybirdOpensAt: dateTimePolicy,
      endDate: datePolicy,
      generalOpensAt: dateTimePolicy,
      startDate: datePolicy,
    },
  },
  InternetBankingPayment: { fields: { createdAt: dateTimePolicy } },
  Message: { fields: { createdAt: dateTimePolicy } },
  Refund: { fields: { createdAt: dateTimePolicy } },
  Registration: {
    fields: { codeOfConductAcceptedAt: dateTimePolicy, completedAt: dateTimePolicy },
  },
  Session: { fields: { endsAt: dateTimePolicy, startsAt: dateTimePolicy } },
  Slot: { fields: { endsAt: dateTimePolicy, startsAt: dateTimePolicy } },
  Voucher: { fields: { createdAt: dateTimePolicy } },
  Waitlist: { fields: { offeredAt: dateTimePolicy } },
  WorkshopAllocationSession: { fields: { endsAt: dateTimePolicy, startsAt: dateTimePolicy } },
};
