/* eslint-disable */
import { DateTime } from 'luxon';
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Country: String;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: DateTime;
  ISODate: DateTime;
  Upload: File;
};

export type Activity = {
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  slots: Array<Slot>;
  slug: Scalars['String'];
  type: ActivityType;
};

export type ActivityAttributes = {
  description: InputMaybe<Scalars['String']>;
  name: InputMaybe<Scalars['String']>;
  profileIds: InputMaybe<Array<Scalars['ID']>>;
  slug: InputMaybe<Scalars['String']>;
};

export type ActivityPicture = {
  __typename: 'ActivityPicture';
  blurhash: Scalars['String'];
  id: Scalars['ID'];
  /** 1920x1080 */
  large: Scalars['String'];
  /** 1280x720 */
  medium: Scalars['String'];
  /** 480x270 */
  small: Scalars['String'];
  /** 48x27 */
  tiny: Scalars['String'];
};

export type ActivityResult = SearchResult & {
  __typename: 'ActivityResult';
  activity: Activity;
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  title: Scalars['String'];
  url: Scalars['String'];
};

export enum ActivityType {
  /** Show */
  Show = 'Show',
  /** SocialEvent */
  SocialEvent = 'SocialEvent',
  /** Workshop */
  Workshop = 'Workshop'
}

export type BooleanSetting = Setting & {
  __typename: 'BooleanSetting';
  description: Scalars['String'];
  id: Scalars['String'];
  value: Scalars['Boolean'];
};

/** Autogenerated return type of CreateActivity. */
export type CreateActivityPayload = {
  __typename: 'CreateActivityPayload';
  activity: Activity;
  slot: Maybe<Slot>;
};

/** Autogenerated return type of CreateMultipleSlots. */
export type CreateMultipleSlotsPayload = {
  __typename: 'CreateMultipleSlotsPayload';
  slots: Array<Slot>;
};

/** Autogenerated return type of CreatePerson. */
export type CreatePersonPayload = {
  __typename: 'CreatePersonPayload';
  profile: Person;
};

/** Autogenerated return type of CreateSlot. */
export type CreateSlotPayload = {
  __typename: 'CreateSlotPayload';
  slot: Slot;
};

/** Autogenerated return type of CreateTranslation. */
export type CreateTranslationPayload = {
  __typename: 'CreateTranslationPayload';
  translation: Translation;
};

export type Credential = {
  __typename: 'Credential';
  accessToken: Scalars['String'];
  client: Scalars['String'];
  expiry: Scalars['Int'];
  tokenType: Scalars['String'];
  uid: Scalars['String'];
};

export type Festival = {
  __typename: 'Festival';
  activities: Array<Activity>;
  activity: Maybe<Activity>;
  endDate: Scalars['ISODate'];
  id: Scalars['ID'];
  startDate: Scalars['ISODate'];
  state: FestivalState;
  timetable: Timetable;
  venues: Array<Venue>;
  workshopSlots: Array<WorkshopSlot>;
};


export type FestivalActivitiesArgs = {
  type: InputMaybe<ActivityType>;
};


export type FestivalActivityArgs = {
  slug: Scalars['String'];
  type: ActivityType;
};

export enum FestivalState {
  /** In the past */
  Finished = 'Finished',
  /** Happening right now */
  Happening = 'Happening',
  /** In the future */
  Upcoming = 'Upcoming'
}

/** Autogenerated return type of MergePeople. */
export type MergePeoplePayload = {
  __typename: 'MergePeoplePayload';
  profile: Person;
};

/** Autogenerated return type of MoveActivity. */
export type MoveActivityPayload = {
  __typename: 'MoveActivityPayload';
  activity: Activity;
};

export type MultipleSlotAttributes = {
  activityType: ActivityType;
  festivalId: Scalars['ID'];
  timeRanges: Array<TimeRangeAttributes>;
  venueIds: Array<Scalars['ID']>;
};

export type Mutation = {
  __typename: 'Mutation';
  createActivity: Maybe<CreateActivityPayload>;
  createPerson: Maybe<CreatePersonPayload>;
  createSlot: Maybe<CreateSlotPayload>;
  createSlots: Maybe<CreateMultipleSlotsPayload>;
  createTranslation: Maybe<CreateTranslationPayload>;
  destroySlot: Maybe<Scalars['Boolean']>;
  destroyTranslation: Maybe<Scalars['Boolean']>;
  mergePeople: Maybe<MergePeoplePayload>;
  moveActivity: Maybe<MoveActivityPayload>;
  renameActivity: Maybe<RenameActivityPayload>;
  updateActivity: Maybe<UpdateActivityPayload>;
  updatePerson: Maybe<UpdatePersonPayload>;
  updateSetting: Maybe<UpdateSettingPayload>;
  updateSlot: Maybe<UpdateSlotPayload>;
  updateTranslation: Maybe<UpdateTranslationPayload>;
  updateUser: Maybe<UpdateUserPayload>;
  userConfirmRegistrationWithToken: Maybe<UserConfirmRegistrationWithTokenPayload>;
  userLogin: Maybe<UserLoginPayload>;
  userLogout: Maybe<UserLogoutPayload>;
  userRegister: Maybe<UserRegisterPayload>;
  userResendConfirmationWithToken: Maybe<UserResendConfirmationWithTokenPayload>;
  userSendPasswordResetWithToken: Maybe<UserSendPasswordResetWithTokenPayload>;
  userUpdatePasswordWithToken: Maybe<UserUpdatePasswordWithTokenPayload>;
};


export type MutationCreateActivityArgs = {
  attributes: ActivityAttributes;
  festivalId: Scalars['ID'];
  slotId: InputMaybe<Scalars['ID']>;
  type: ActivityType;
};


export type MutationCreatePersonArgs = {
  attributes: PersonAttributes;
};


export type MutationCreateSlotArgs = {
  attributes: SlotAttributes;
  festivalId: Scalars['ID'];
};


export type MutationCreateSlotsArgs = {
  attributes: MultipleSlotAttributes;
};


export type MutationCreateTranslationArgs = {
  country: Scalars['Country'];
  name: Scalars['String'];
  traditionalName: Scalars['String'];
};


export type MutationDestroySlotArgs = {
  id: Scalars['ID'];
};


export type MutationDestroyTranslationArgs = {
  id: Scalars['ID'];
};


export type MutationMergePeopleArgs = {
  attributes: ProfileMergeAttributes;
  profileIds: Array<Scalars['ID']>;
};


export type MutationMoveActivityArgs = {
  id: Scalars['ID'];
  slug: Scalars['String'];
};


export type MutationRenameActivityArgs = {
  id: Scalars['ID'];
  name: Scalars['String'];
};


export type MutationUpdateActivityArgs = {
  attributes: ActivityAttributes;
  id: Scalars['ID'];
};


export type MutationUpdatePersonArgs = {
  attributes: PersonAttributes;
  id: Scalars['ID'];
};


export type MutationUpdateSettingArgs = {
  id: Scalars['String'];
  value: SettingValue;
};


export type MutationUpdateSlotArgs = {
  attributes: SlotAttributes;
  id: Scalars['ID'];
};


export type MutationUpdateTranslationArgs = {
  country: Scalars['Country'];
  id: Scalars['ID'];
  name: Scalars['String'];
  traditionalName: Scalars['String'];
};


export type MutationUpdateUserArgs = {
  attributes: UserAttributes;
  id: InputMaybe<Scalars['ID']>;
};


export type MutationUserConfirmRegistrationWithTokenArgs = {
  confirmationToken: Scalars['String'];
};


export type MutationUserLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationUserRegisterArgs = {
  confirmUrl: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  name: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
};


export type MutationUserResendConfirmationWithTokenArgs = {
  confirmUrl: Scalars['String'];
  email: Scalars['String'];
};


export type MutationUserSendPasswordResetWithTokenArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};


export type MutationUserUpdatePasswordWithTokenArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  resetPasswordToken: Scalars['String'];
};

export type PageResult = SearchResult & {
  __typename: 'PageResult';
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lede: Maybe<Scalars['String']>;
  slug: Scalars['String'];
  title: Scalars['String'];
  url: Scalars['String'];
};

export enum Permission {
  /** Manage activities */
  Activities = 'activities',
  /** Administrator */
  Admin = 'admin',
  /** Manage content */
  Content = 'content',
  /** Manage people */
  People = 'people',
  /** Manage permissions */
  Permissions = 'permissions',
  /** Manage registrations */
  Registrations = 'registrations',
  /** Manage shows */
  Shows = 'shows',
  /** Manage social events */
  SocialEvents = 'social_events',
  /** Manage workshops */
  Workshops = 'workshops'
}

export type PermissionDefinition = {
  __typename: 'PermissionDefinition';
  children: Maybe<Array<PermissionDefinition>>;
  id: Permission;
  label: Scalars['String'];
};

export type Person = {
  __typename: 'Person';
  bio: Scalars['String'];
  city: Maybe<PlaceName>;
  country: Maybe<PlaceName>;
  id: Scalars['ID'];
  name: Scalars['String'];
  picture: Maybe<ProfilePicture>;
  pronouns: Maybe<Scalars['String']>;
  user: Maybe<User>;
};

export type PersonAttributes = {
  bio: InputMaybe<Scalars['String']>;
  city: InputMaybe<Scalars['String']>;
  country: InputMaybe<Scalars['Country']>;
  name: InputMaybe<Scalars['String']>;
  picture: InputMaybe<Scalars['Upload']>;
  pronouns: InputMaybe<Scalars['String']>;
};

export type PersonResult = SearchResult & {
  __typename: 'PersonResult';
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  person: Person;
  title: Scalars['String'];
  url: Scalars['String'];
};

export type PlaceName = {
  __typename: 'PlaceName';
  id: Scalars['ID'];
  name: Scalars['String'];
  traditionalName: Maybe<Scalars['String']>;
};

export type ProfileMergeAttributes = {
  city: InputMaybe<Scalars['ID']>;
  country: InputMaybe<Scalars['ID']>;
  name: InputMaybe<Scalars['ID']>;
  pronouns: InputMaybe<Scalars['ID']>;
};

export type ProfilePicture = {
  __typename: 'ProfilePicture';
  id: Scalars['ID'];
  /** 256x256 */
  large: Scalars['String'];
  /** 128x128 */
  medium: Scalars['String'];
  /** 64x64 */
  small: Scalars['String'];
};

export type Query = {
  __typename: 'Query';
  festival: Festival;
  people: Maybe<Array<Person>>;
  permissions: Array<PermissionDefinition>;
  person: Maybe<Person>;
  search: Array<SearchResult>;
  setting: Maybe<Setting>;
  translations: Array<Translation>;
  user: Maybe<User>;
};


export type QueryFestivalArgs = {
  year: InputMaybe<Scalars['String']>;
};


export type QueryPersonArgs = {
  id: Scalars['ID'];
};


export type QuerySearchArgs = {
  activityType: InputMaybe<ActivityType>;
  limit: InputMaybe<Scalars['Int']>;
  only?: InputMaybe<Array<SearchType>>;
  query: Scalars['String'];
};


export type QuerySettingArgs = {
  id: Scalars['String'];
};


export type QueryUserArgs = {
  id: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of RenameActivity. */
export type RenameActivityPayload = {
  __typename: 'RenameActivityPayload';
  activity: Activity;
};

export type SearchResult = {
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  title: Scalars['String'];
  url: Scalars['String'];
};

export enum SearchType {
  /** Activity */
  Activity = 'Activity',
  /** Page */
  Page = 'Page',
  /** Person */
  Person = 'Person',
  /** Venue */
  Venue = 'Venue'
}

export type Setting = {
  description: Scalars['String'];
  id: Scalars['String'];
};

export type SettingValue = {
  boolean: InputMaybe<Scalars['Boolean']>;
  string: InputMaybe<Scalars['String']>;
};

export type Show = Activity & {
  __typename: 'Show';
  description: Maybe<Scalars['String']>;
  /** Directors */
  directors: Array<Person>;
  id: Scalars['ID'];
  name: Scalars['String'];
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  slots: Array<Slot>;
  slug: Scalars['String'];
  type: ActivityType;
};

export type Slot = {
  __typename: 'Slot';
  activity: Maybe<Activity>;
  activityType: ActivityType;
  endsAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  startsAt: Scalars['ISO8601DateTime'];
  venue: Maybe<Venue>;
};

export type SlotAttributes = {
  activityId: InputMaybe<Scalars['ID']>;
  activityType: InputMaybe<ActivityType>;
  endsAt: InputMaybe<Scalars['ISO8601DateTime']>;
  startsAt: InputMaybe<Scalars['ISO8601DateTime']>;
  venueId: InputMaybe<Scalars['ID']>;
};

export type SocialEvent = Activity & {
  __typename: 'SocialEvent';
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  /** Organisers */
  organisers: Array<Person>;
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  slots: Array<Slot>;
  slug: Scalars['String'];
  type: ActivityType;
};

export type StringSetting = Setting & {
  __typename: 'StringSetting';
  description: Scalars['String'];
  id: Scalars['String'];
  value: Scalars['String'];
};

export type TimeRangeAttributes = {
  endsAt: Scalars['ISO8601DateTime'];
  startsAt: Scalars['ISO8601DateTime'];
};

export type Timetable = {
  __typename: 'Timetable';
  id: Scalars['ID'];
  slots: Array<Slot>;
};

export type Translation = {
  __typename: 'Translation';
  country: Scalars['Country'];
  id: Scalars['ID'];
  name: Scalars['String'];
  traditionalName: Scalars['String'];
};

/** Autogenerated return type of UpdateActivity. */
export type UpdateActivityPayload = {
  __typename: 'UpdateActivityPayload';
  activity: Activity;
};

/** Autogenerated return type of UpdatePerson. */
export type UpdatePersonPayload = {
  __typename: 'UpdatePersonPayload';
  profile: Person;
};

/** Autogenerated return type of UpdateSetting. */
export type UpdateSettingPayload = {
  __typename: 'UpdateSettingPayload';
  setting: Setting;
};

/** Autogenerated return type of UpdateSlot. */
export type UpdateSlotPayload = {
  __typename: 'UpdateSlotPayload';
  slot: Slot;
};

/** Autogenerated return type of UpdateTranslation. */
export type UpdateTranslationPayload = {
  __typename: 'UpdateTranslationPayload';
  translation: Translation;
};

/** Autogenerated return type of UpdateUser. */
export type UpdateUserPayload = {
  __typename: 'UpdateUserPayload';
  user: User;
};

export type User = {
  __typename: 'User';
  email: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  permissions: Array<Permission>;
  profile: Maybe<Person>;
  settings: Array<Setting>;
};

export type UserAttributes = {
  email: InputMaybe<Scalars['String']>;
  name: InputMaybe<Scalars['String']>;
  permissions: InputMaybe<Array<Permission>>;
};

/** Autogenerated return type of UserConfirmRegistrationWithToken. */
export type UserConfirmRegistrationWithTokenPayload = {
  __typename: 'UserConfirmRegistrationWithTokenPayload';
  authenticatable: User;
  /** Authentication credentials. Null unless user is signed in after confirmation. */
  credentials: Maybe<Credential>;
};

/** Autogenerated return type of UserLogin. */
export type UserLoginPayload = {
  __typename: 'UserLoginPayload';
  authenticatable: User;
  credentials: Credential;
};

/** Autogenerated return type of UserLogout. */
export type UserLogoutPayload = {
  __typename: 'UserLogoutPayload';
  authenticatable: User;
};

/** Autogenerated return type of UserRegister. */
export type UserRegisterPayload = {
  __typename: 'UserRegisterPayload';
  authenticatable: User;
  /**
   * Authentication credentials. Null if after signUp resource is not active for
   * authentication (e.g. Email confirmation required).
   */
  credentials: Maybe<Credential>;
};

/** Autogenerated return type of UserResendConfirmationWithToken. */
export type UserResendConfirmationWithTokenPayload = {
  __typename: 'UserResendConfirmationWithTokenPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of UserSendPasswordResetWithToken. */
export type UserSendPasswordResetWithTokenPayload = {
  __typename: 'UserSendPasswordResetWithTokenPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of UserUpdatePasswordWithToken. */
export type UserUpdatePasswordWithTokenPayload = {
  __typename: 'UserUpdatePasswordWithTokenPayload';
  authenticatable: User;
  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */
  credentials: Maybe<Credential>;
};

export type Venue = {
  __typename: 'Venue';
  address: Scalars['String'];
  building: Scalars['String'];
  id: Scalars['ID'];
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
  position: Scalars['Int'];
  room: Maybe<Scalars['String']>;
};

export type VenueResult = SearchResult & {
  __typename: 'VenueResult';
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  title: Scalars['String'];
  url: Scalars['String'];
  venue: Venue;
};

export type Workshop = Activity & {
  __typename: 'Workshop';
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  picture: Maybe<ActivityPicture>;
  presenters: Array<Person>;
  slots: Array<Slot>;
  slug: Scalars['String'];
  /** Tutors */
  tutors: Array<Person>;
  type: ActivityType;
};

export type WorkshopSlot = {
  __typename: 'WorkshopSlot';
  endsAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  startsAt: Scalars['ISO8601DateTime'];
  workshops: Array<Workshop>;
};

export type GetSettingQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetSettingQuery = { __typename: 'Query', setting: { __typename: 'BooleanSetting', id: string, valueAsBoolean: boolean } | { __typename: 'StringSetting', id: string, valueAsString: string } | null };

export type UpdateSettingMutationVariables = Exact<{
  id: Scalars['String'];
  value: SettingValue;
}>;


export type UpdateSettingMutation = { __typename: 'Mutation', updateSetting: { __typename: 'UpdateSettingPayload', setting: { __typename: 'BooleanSetting', id: string, valueAsBoolean: boolean } | { __typename: 'StringSetting', id: string, valueAsString: string } } | null };

type SettingValueFragment_BooleanSetting_Fragment = { __typename: 'BooleanSetting', id: string, valueAsBoolean: boolean };

type SettingValueFragment_StringSetting_Fragment = { __typename: 'StringSetting', id: string, valueAsString: string };

export type SettingValueFragmentFragment = SettingValueFragment_BooleanSetting_Fragment | SettingValueFragment_StringSetting_Fragment;

export type AuthenticatedUserFragment = { __typename: 'User', id: string, permissions: Array<Permission>, profile: { __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', small: string } | null } | null };

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = { __typename: 'Query', user: { __typename: 'User', id: string, permissions: Array<Permission>, profile: { __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', small: string } | null } | null } | null };

export type LogInMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type LogInMutation = { __typename: 'Mutation', userLogin: { __typename: 'UserLoginPayload', user: { __typename: 'User', id: string, permissions: Array<Permission>, profile: { __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', small: string } | null } | null }, credentials: { __typename: 'Credential', accessToken: string, client: string, uid: string } } | null };

export type LogOutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogOutMutation = { __typename: 'Mutation', userLogout: { __typename: 'UserLogoutPayload', user: { __typename: 'User', id: string } } | null };

export type SignUpMutationVariables = Exact<{
  name: Scalars['String'];
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type SignUpMutation = { __typename: 'Mutation', userRegister: { __typename: 'UserRegisterPayload', user: { __typename: 'User', id: string, permissions: Array<Permission>, profile: { __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', small: string } | null } | null }, credentials: { __typename: 'Credential', accessToken: string, client: string, uid: string } | null } | null };

export type ResetPasswordMutationVariables = Exact<{
  email: Scalars['String'];
}>;


export type ResetPasswordMutation = { __typename: 'Mutation', userSendPasswordResetWithToken: { __typename: 'UserSendPasswordResetWithTokenPayload', message: string } | null };

export type HeaderQueryVariables = Exact<{
  year: InputMaybe<Scalars['String']>;
}>;


export type HeaderQuery = { __typename: 'Query', festival: { __typename: 'Festival', id: string, startDate: DateTime, endDate: DateTime } };

export type SearchQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type SearchQuery = { __typename: 'Query', search: Array<{ __typename: 'ActivityResult', id: string, title: string, description: string | null, url: string, activity: { __typename: 'Show', id: string, name: string, type: ActivityType } | { __typename: 'SocialEvent', id: string, name: string, type: ActivityType } | { __typename: 'Workshop', id: string, name: string, type: ActivityType } } | { __typename: 'PageResult', id: string, title: string, description: string | null, url: string } | { __typename: 'PersonResult', id: string, title: string, description: string | null, url: string, person: { __typename: 'Person', id: string, name: string, city: { __typename: 'PlaceName', name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', name: string, traditionalName: string | null } | null, picture: { __typename: 'ProfilePicture', id: string, small: string } | null } } | { __typename: 'VenueResult', id: string, title: string, description: string | null, url: string, venue: { __typename: 'Venue', id: string, room: string | null, building: string, address: string } }> };

export type ActivityListQueryVariables = Exact<{
  year: Scalars['String'];
  type: InputMaybe<ActivityType>;
}>;


export type ActivityListQuery = { __typename: 'Query', festival: { __typename: 'Festival', id: string, activities: Array<{ __typename: 'Show', id: string, name: string, type: ActivityType, slug: string, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }>, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, name: string, type: ActivityType, slug: string, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }>, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, name: string, type: ActivityType, slug: string, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }>, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> }> } };

export type ActivityDetailsQueryVariables = Exact<{
  year: Scalars['String'];
  type: ActivityType;
  slug: Scalars['String'];
}>;


export type ActivityDetailsQuery = { __typename: 'Query', festival: { __typename: 'Festival', id: string, activity: { __typename: 'Show', id: string, name: string, type: ActivityType, slug: string, description: string | null, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }>, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }> } | { __typename: 'SocialEvent', id: string, name: string, type: ActivityType, slug: string, description: string | null, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }>, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }> } | { __typename: 'Workshop', id: string, name: string, type: ActivityType, slug: string, description: string | null, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }>, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }> } | null } };

type ActivityListActivity_Show_Fragment = { __typename: 'Show', id: string, name: string, type: ActivityType, slug: string, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }>, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> };

type ActivityListActivity_SocialEvent_Fragment = { __typename: 'SocialEvent', id: string, name: string, type: ActivityType, slug: string, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }>, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> };

type ActivityListActivity_Workshop_Fragment = { __typename: 'Workshop', id: string, name: string, type: ActivityType, slug: string, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, venue: { __typename: 'Venue', id: string, room: string | null, building: string } | null }>, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> };

export type ActivityListActivityFragment = ActivityListActivity_Show_Fragment | ActivityListActivity_SocialEvent_Fragment | ActivityListActivity_Workshop_Fragment;

export type ActivityPresenterFragment = { __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null };

export type RenameActivityMutationVariables = Exact<{
  id: Scalars['ID'];
  name: Scalars['String'];
}>;


export type RenameActivityMutation = { __typename: 'Mutation', renameActivity: { __typename: 'RenameActivityPayload', activity: { __typename: 'Show', id: string, name: string, type: ActivityType, slug: string } | { __typename: 'SocialEvent', id: string, name: string, type: ActivityType, slug: string } | { __typename: 'Workshop', id: string, name: string, type: ActivityType, slug: string } } | null };

export type MoveActivityMutationVariables = Exact<{
  id: Scalars['ID'];
  slug: Scalars['String'];
}>;


export type MoveActivityMutation = { __typename: 'Mutation', moveActivity: { __typename: 'MoveActivityPayload', activity: { __typename: 'Show', id: string, name: string, type: ActivityType, slug: string } | { __typename: 'SocialEvent', id: string, name: string, type: ActivityType, slug: string } | { __typename: 'Workshop', id: string, name: string, type: ActivityType, slug: string } } | null };

export type UpdateActivityMutationVariables = Exact<{
  id: Scalars['ID'];
  attributes: ActivityAttributes;
}>;


export type UpdateActivityMutation = { __typename: 'Mutation', updateActivity: { __typename: 'UpdateActivityPayload', activity: { __typename: 'Show', id: string, name: string, type: ActivityType, slug: string, description: string | null, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, name: string, type: ActivityType, slug: string, description: string | null, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, name: string, type: ActivityType, slug: string, description: string | null, presenters: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } } | null };

export type FestivalQueryVariables = Exact<{
  year: Scalars['String'];
}>;


export type FestivalQuery = { __typename: 'Query', festival: { __typename: 'Festival', id: string } };

export type CurrentFestivalQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentFestivalQuery = { __typename: 'Query', festival: { __typename: 'Festival', id: string, startDate: DateTime, endDate: DateTime } };

export type PersonDetailsFragment = { __typename: 'Person', id: string, name: string, pronouns: string | null, user: { __typename: 'User', id: string, email: string } | null, city: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, picture: { __typename: 'ProfilePicture', id: string, small: string, large: string } | null };

export type PersonUserFragment = { __typename: 'User', id: string, email: string, permissions: Array<Permission> };

export type PeopleQueryVariables = Exact<{ [key: string]: never; }>;


export type PeopleQuery = { __typename: 'Query', people: Array<{ __typename: 'Person', id: string, name: string, pronouns: string | null, user: { __typename: 'User', id: string, email: string } | null, city: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, picture: { __typename: 'ProfilePicture', id: string, small: string, large: string } | null }> | null };

export type PermissionDefinitionFieldsFragment = { __typename: 'PermissionDefinition', id: Permission, label: string };

export type PersonQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type PersonQuery = { __typename: 'Query', person: { __typename: 'Person', bio: string, id: string, name: string, pronouns: string | null, user: { __typename: 'User', permissions: Array<Permission>, id: string, email: string } | null, city: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, picture: { __typename: 'ProfilePicture', id: string, small: string, large: string } | null } | null, permissions: Array<{ __typename: 'PermissionDefinition', id: Permission, label: string, children: Array<{ __typename: 'PermissionDefinition', id: Permission, label: string, children: Array<{ __typename: 'PermissionDefinition', id: Permission, label: string, children: Array<{ __typename: 'PermissionDefinition', id: Permission, label: string }> | null }> | null }> | null }> };

export type UpdatePersonMutationVariables = Exact<{
  id: Scalars['ID'];
  attributes: PersonAttributes;
}>;


export type UpdatePersonMutation = { __typename: 'Mutation', updatePerson: { __typename: 'UpdatePersonPayload', profile: { __typename: 'Person', bio: string, id: string, name: string, pronouns: string | null, user: { __typename: 'User', id: string, email: string } | null, city: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, picture: { __typename: 'ProfilePicture', id: string, small: string, large: string } | null } } | null };

export type MergePeopleMutationVariables = Exact<{
  profileIds: Array<Scalars['ID']> | Scalars['ID'];
  attributes: ProfileMergeAttributes;
}>;


export type MergePeopleMutation = { __typename: 'Mutation', mergePeople: { __typename: 'MergePeoplePayload', profile: { __typename: 'Person', bio: string, id: string, name: string, pronouns: string | null, user: { __typename: 'User', id: string, email: string } | null, city: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, picture: { __typename: 'ProfilePicture', id: string, small: string, large: string } | null } } | null };

export type UpdatePermissionsMutationVariables = Exact<{
  id: Scalars['ID'];
  permissions: Array<Permission> | Permission;
}>;


export type UpdatePermissionsMutation = { __typename: 'Mutation', updateUser: { __typename: 'UpdateUserPayload', user: { __typename: 'User', id: string, permissions: Array<Permission> } } | null };

export type SettingsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type SettingsQuery = { __typename: 'Query', user: { __typename: 'User', id: string, settings: Array<{ __typename: 'BooleanSetting', id: string, valueAsBoolean: boolean } | { __typename: 'StringSetting', id: string, valueAsString: string }> } | null };

export type ActivitySearchQueryVariables = Exact<{
  query: Scalars['String'];
  activityType: ActivityType;
}>;


export type ActivitySearchQuery = { __typename: 'Query', search: Array<{ __typename: 'ActivityResult', id: string, title: string, description: string | null, url: string, activity: { __typename: 'Show', id: string, type: ActivityType, name: string, slug: string, directors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, type: ActivityType, name: string, slug: string, organisers: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, tutors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } } | { __typename: 'PageResult', id: string, title: string, description: string | null, url: string } | { __typename: 'PersonResult', id: string, title: string, description: string | null, url: string } | { __typename: 'VenueResult', id: string, title: string, description: string | null, url: string }> };

export type PersonSearchQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type PersonSearchQuery = { __typename: 'Query', search: Array<{ __typename: 'ActivityResult', id: string } | { __typename: 'PageResult', id: string } | { __typename: 'PersonResult', id: string, person: { __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null } } | { __typename: 'VenueResult', id: string }> };

export type CreateActivityMutationVariables = Exact<{
  festivalId: Scalars['ID'];
  activityType: ActivityType;
  attributes: ActivityAttributes;
  slotId: InputMaybe<Scalars['ID']>;
}>;


export type CreateActivityMutation = { __typename: 'Mutation', createActivity: { __typename: 'CreateActivityPayload', activity: { __typename: 'Show', id: string, type: ActivityType, name: string, slug: string, directors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, type: ActivityType, name: string, slug: string, organisers: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, tutors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> }, slot: { __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, activityType: ActivityType, activity: { __typename: 'Show', id: string, type: ActivityType, name: string, slug: string, directors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, type: ActivityType, name: string, slug: string, organisers: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, tutors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | null, venue: { __typename: 'Venue', id: string, room: string | null, building: string, position: number } | null } | null } | null };

type TimetableActivity_Show_Fragment = { __typename: 'Show', id: string, type: ActivityType, name: string, slug: string, directors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> };

type TimetableActivity_SocialEvent_Fragment = { __typename: 'SocialEvent', id: string, type: ActivityType, name: string, slug: string, organisers: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> };

type TimetableActivity_Workshop_Fragment = { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, tutors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> };

export type TimetableActivityFragment = TimetableActivity_Show_Fragment | TimetableActivity_SocialEvent_Fragment | TimetableActivity_Workshop_Fragment;

export type TimetableCastFragment = { __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null };

export type TimetableSlotFragment = { __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, activityType: ActivityType, activity: { __typename: 'Show', id: string, type: ActivityType, name: string, slug: string, directors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, type: ActivityType, name: string, slug: string, organisers: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, tutors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | null, venue: { __typename: 'Venue', id: string, room: string | null, building: string, position: number } | null };

export type TimetableQueryVariables = Exact<{
  year: InputMaybe<Scalars['String']>;
}>;


export type TimetableQuery = { __typename: 'Query', festival: { __typename: 'Festival', id: string, startDate: DateTime, endDate: DateTime, timetable: { __typename: 'Timetable', id: string, slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, activityType: ActivityType, activity: { __typename: 'Show', id: string, type: ActivityType, name: string, slug: string, directors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, type: ActivityType, name: string, slug: string, organisers: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, tutors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | null, venue: { __typename: 'Venue', id: string, room: string | null, building: string, position: number } | null }> }, venues: Array<{ __typename: 'Venue', id: string, room: string | null, building: string, position: number }> } };

export type CreateSlotsMutationVariables = Exact<{
  attributes: MultipleSlotAttributes;
}>;


export type CreateSlotsMutation = { __typename: 'Mutation', createSlots: { __typename: 'CreateMultipleSlotsPayload', slots: Array<{ __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, activityType: ActivityType, activity: { __typename: 'Show', id: string, type: ActivityType, name: string, slug: string, directors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, type: ActivityType, name: string, slug: string, organisers: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, tutors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | null, venue: { __typename: 'Venue', id: string, room: string | null, building: string, position: number } | null }> } | null };

export type DestroySlotMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DestroySlotMutation = { __typename: 'Mutation', destroySlot: boolean | null };

export type UpdateSlotMutationVariables = Exact<{
  id: Scalars['ID'];
  attributes: SlotAttributes;
}>;


export type UpdateSlotMutation = { __typename: 'Mutation', updateSlot: { __typename: 'UpdateSlotPayload', slot: { __typename: 'Slot', id: string, startsAt: DateTime, endsAt: DateTime, activityType: ActivityType, activity: { __typename: 'Show', id: string, type: ActivityType, name: string, slug: string, directors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'SocialEvent', id: string, type: ActivityType, name: string, slug: string, organisers: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, tutors: Array<{ __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null }> } | null, venue: { __typename: 'Venue', id: string, room: string | null, building: string, position: number } | null } } | null };

export type CreatePersonMutationVariables = Exact<{
  attributes: PersonAttributes;
}>;


export type CreatePersonMutation = { __typename: 'Mutation', createPerson: { __typename: 'CreatePersonPayload', profile: { __typename: 'Person', id: string, name: string, picture: { __typename: 'ProfilePicture', id: string, small: string } | null } } | null };

export type TranslationDetailsFragment = { __typename: 'Translation', id: string, name: string, traditionalName: string, country: String };

export type TranslationsQueryVariables = Exact<{ [key: string]: never; }>;


export type TranslationsQuery = { __typename: 'Query', translations: Array<{ __typename: 'Translation', id: string, name: string, traditionalName: string, country: String }> };

export type CreateTranslationMutationVariables = Exact<{
  name: Scalars['String'];
  traditionalName: Scalars['String'];
  country: Scalars['Country'];
}>;


export type CreateTranslationMutation = { __typename: 'Mutation', createTranslation: { __typename: 'CreateTranslationPayload', translation: { __typename: 'Translation', id: string, name: string, traditionalName: string, country: String } } | null };

export type UpdateTranslationMutationVariables = Exact<{
  id: Scalars['ID'];
  name: Scalars['String'];
  traditionalName: Scalars['String'];
  country: Scalars['Country'];
}>;


export type UpdateTranslationMutation = { __typename: 'Mutation', updateTranslation: { __typename: 'UpdateTranslationPayload', translation: { __typename: 'Translation', id: string, name: string, traditionalName: string, country: String } } | null };

export type DestroyTranslationMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DestroyTranslationMutation = { __typename: 'Mutation', destroyTranslation: boolean | null };

export type RegistrationWorkshopFragment = { __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, picture: { __typename: 'ActivityPicture', id: string, medium: string, blurhash: string } | null, tutors: Array<{ __typename: 'Person', id: string, name: string, city: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null }> };

export type RegistrationTutorFragment = { __typename: 'Person', id: string, name: string, city: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null };

export type RegistrationQueryVariables = Exact<{ [key: string]: never; }>;


export type RegistrationQuery = { __typename: 'Query', festival: { __typename: 'Festival', id: string, startDate: DateTime, endDate: DateTime, workshopSlots: Array<{ __typename: 'WorkshopSlot', id: string, startsAt: DateTime, endsAt: DateTime, workshops: Array<{ __typename: 'Workshop', id: string, type: ActivityType, name: string, slug: string, picture: { __typename: 'ActivityPicture', id: string, medium: string, blurhash: string } | null, tutors: Array<{ __typename: 'Person', id: string, name: string, city: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null, country: { __typename: 'PlaceName', id: string, name: string, traditionalName: string | null } | null }> }> }> } };

export const SettingValueFragmentFragmentDoc = gql`
    fragment SettingValueFragment on Setting {
  id
  ... on StringSetting {
    valueAsString: value
  }
  ... on BooleanSetting {
    valueAsBoolean: value
  }
}
    `;
export const AuthenticatedUserFragmentDoc = gql`
    fragment AuthenticatedUser on User {
  id
  permissions
  profile {
    id
    name
    picture {
      small
    }
  }
}
    `;
export const ActivityPresenterFragmentDoc = gql`
    fragment ActivityPresenter on Person {
  id
  name
  picture {
    id
    small
  }
}
    `;
export const ActivityListActivityFragmentDoc = gql`
    fragment ActivityListActivity on Activity {
  id
  name
  type
  slug
  slots {
    id
    startsAt
    endsAt
    venue {
      id
      room
      building
    }
  }
  presenters {
    ...ActivityPresenter
  }
}
    ${ActivityPresenterFragmentDoc}`;
export const PersonDetailsFragmentDoc = gql`
    fragment PersonDetails on Person {
  id
  name
  pronouns
  user {
    id
    email
  }
  city {
    id
    name
    traditionalName
  }
  country {
    id
    name
    traditionalName
  }
  picture {
    id
    small
    large
  }
}
    `;
export const PersonUserFragmentDoc = gql`
    fragment PersonUser on User {
  id
  email
  permissions
}
    `;
export const PermissionDefinitionFieldsFragmentDoc = gql`
    fragment PermissionDefinitionFields on PermissionDefinition {
  id
  label
}
    `;
export const TimetableCastFragmentDoc = gql`
    fragment TimetableCast on Person {
  id
  name
  picture {
    id
    small
  }
}
    `;
export const TimetableActivityFragmentDoc = gql`
    fragment TimetableActivity on Activity {
  id
  type
  name
  slug
  ... on Workshop {
    tutors {
      ...TimetableCast
    }
  }
  ... on Show {
    directors {
      ...TimetableCast
    }
  }
  ... on SocialEvent {
    organisers {
      ...TimetableCast
    }
  }
}
    ${TimetableCastFragmentDoc}`;
export const TimetableSlotFragmentDoc = gql`
    fragment TimetableSlot on Slot {
  id
  startsAt
  endsAt
  activityType
  activity {
    ...TimetableActivity
  }
  venue {
    id
    room
    building
    position
  }
}
    ${TimetableActivityFragmentDoc}`;
export const TranslationDetailsFragmentDoc = gql`
    fragment TranslationDetails on Translation {
  id
  name
  traditionalName
  country
}
    `;
export const RegistrationTutorFragmentDoc = gql`
    fragment RegistrationTutor on Person {
  id
  name
  city {
    id
    name
    traditionalName
  }
  country {
    id
    name
    traditionalName
  }
}
    `;
export const RegistrationWorkshopFragmentDoc = gql`
    fragment RegistrationWorkshop on Workshop {
  id
  type
  name
  slug
  picture {
    id
    medium
    blurhash
  }
  tutors {
    ...RegistrationTutor
  }
}
    ${RegistrationTutorFragmentDoc}`;
export const GetSettingDocument = gql`
    query GetSetting($id: String!) {
  setting(id: $id) {
    ...SettingValueFragment
  }
}
    ${SettingValueFragmentFragmentDoc}`;

/**
 * __useGetSettingQuery__
 *
 * To run a query within a React component, call `useGetSettingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSettingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSettingQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetSettingQuery(baseOptions: Apollo.QueryHookOptions<GetSettingQuery, GetSettingQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSettingQuery, GetSettingQueryVariables>(GetSettingDocument, options);
      }
export function useGetSettingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSettingQuery, GetSettingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSettingQuery, GetSettingQueryVariables>(GetSettingDocument, options);
        }
export type GetSettingQueryHookResult = ReturnType<typeof useGetSettingQuery>;
export type GetSettingLazyQueryHookResult = ReturnType<typeof useGetSettingLazyQuery>;
export type GetSettingQueryResult = Apollo.QueryResult<GetSettingQuery, GetSettingQueryVariables>;
export const UpdateSettingDocument = gql`
    mutation UpdateSetting($id: String!, $value: SettingValue!) {
  updateSetting(id: $id, value: $value) {
    setting {
      ...SettingValueFragment
    }
  }
}
    ${SettingValueFragmentFragmentDoc}`;
export type UpdateSettingMutationFn = Apollo.MutationFunction<UpdateSettingMutation, UpdateSettingMutationVariables>;

/**
 * __useUpdateSettingMutation__
 *
 * To run a mutation, you first call `useUpdateSettingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSettingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSettingMutation, { data, loading, error }] = useUpdateSettingMutation({
 *   variables: {
 *      id: // value for 'id'
 *      value: // value for 'value'
 *   },
 * });
 */
export function useUpdateSettingMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSettingMutation, UpdateSettingMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSettingMutation, UpdateSettingMutationVariables>(UpdateSettingDocument, options);
      }
export type UpdateSettingMutationHookResult = ReturnType<typeof useUpdateSettingMutation>;
export type UpdateSettingMutationResult = Apollo.MutationResult<UpdateSettingMutation>;
export type UpdateSettingMutationOptions = Apollo.BaseMutationOptions<UpdateSettingMutation, UpdateSettingMutationVariables>;
export const CurrentUserDocument = gql`
    query CurrentUser {
  user {
    ...AuthenticatedUser
  }
}
    ${AuthenticatedUserFragmentDoc}`;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
      }
export function useCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;
export type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;
export type CurrentUserQueryResult = Apollo.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;
export const LogInDocument = gql`
    mutation LogIn($email: String!, $password: String!) {
  userLogin(email: $email, password: $password) {
    user: authenticatable {
      ...AuthenticatedUser
    }
    credentials {
      accessToken
      client
      uid
    }
  }
}
    ${AuthenticatedUserFragmentDoc}`;
export type LogInMutationFn = Apollo.MutationFunction<LogInMutation, LogInMutationVariables>;

/**
 * __useLogInMutation__
 *
 * To run a mutation, you first call `useLogInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logInMutation, { data, loading, error }] = useLogInMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLogInMutation(baseOptions?: Apollo.MutationHookOptions<LogInMutation, LogInMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LogInMutation, LogInMutationVariables>(LogInDocument, options);
      }
export type LogInMutationHookResult = ReturnType<typeof useLogInMutation>;
export type LogInMutationResult = Apollo.MutationResult<LogInMutation>;
export type LogInMutationOptions = Apollo.BaseMutationOptions<LogInMutation, LogInMutationVariables>;
export const LogOutDocument = gql`
    mutation LogOut {
  userLogout {
    user: authenticatable {
      id
    }
  }
}
    `;
export type LogOutMutationFn = Apollo.MutationFunction<LogOutMutation, LogOutMutationVariables>;

/**
 * __useLogOutMutation__
 *
 * To run a mutation, you first call `useLogOutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogOutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logOutMutation, { data, loading, error }] = useLogOutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogOutMutation(baseOptions?: Apollo.MutationHookOptions<LogOutMutation, LogOutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LogOutMutation, LogOutMutationVariables>(LogOutDocument, options);
      }
export type LogOutMutationHookResult = ReturnType<typeof useLogOutMutation>;
export type LogOutMutationResult = Apollo.MutationResult<LogOutMutation>;
export type LogOutMutationOptions = Apollo.BaseMutationOptions<LogOutMutation, LogOutMutationVariables>;
export const SignUpDocument = gql`
    mutation SignUp($name: String!, $email: String!, $password: String!) {
  userRegister(
    name: $name
    email: $email
    password: $password
    passwordConfirmation: $password
  ) {
    user: authenticatable {
      ...AuthenticatedUser
    }
    credentials {
      accessToken
      client
      uid
    }
  }
}
    ${AuthenticatedUserFragmentDoc}`;
export type SignUpMutationFn = Apollo.MutationFunction<SignUpMutation, SignUpMutationVariables>;

/**
 * __useSignUpMutation__
 *
 * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignUpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signUpMutation, { data, loading, error }] = useSignUpMutation({
 *   variables: {
 *      name: // value for 'name'
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSignUpMutation(baseOptions?: Apollo.MutationHookOptions<SignUpMutation, SignUpMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SignUpMutation, SignUpMutationVariables>(SignUpDocument, options);
      }
export type SignUpMutationHookResult = ReturnType<typeof useSignUpMutation>;
export type SignUpMutationResult = Apollo.MutationResult<SignUpMutation>;
export type SignUpMutationOptions = Apollo.BaseMutationOptions<SignUpMutation, SignUpMutationVariables>;
export const ResetPasswordDocument = gql`
    mutation ResetPassword($email: String!) {
  userSendPasswordResetWithToken(email: $email, redirectUrl: "http://example.com") {
    message
  }
}
    `;
export type ResetPasswordMutationFn = Apollo.MutationFunction<ResetPasswordMutation, ResetPasswordMutationVariables>;

/**
 * __useResetPasswordMutation__
 *
 * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useResetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ResetPasswordMutation, ResetPasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, options);
      }
export type ResetPasswordMutationHookResult = ReturnType<typeof useResetPasswordMutation>;
export type ResetPasswordMutationResult = Apollo.MutationResult<ResetPasswordMutation>;
export type ResetPasswordMutationOptions = Apollo.BaseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>;
export const HeaderDocument = gql`
    query Header($year: String) {
  festival(year: $year) {
    id
    startDate
    endDate
  }
}
    `;

/**
 * __useHeaderQuery__
 *
 * To run a query within a React component, call `useHeaderQuery` and pass it any options that fit your needs.
 * When your component renders, `useHeaderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHeaderQuery({
 *   variables: {
 *      year: // value for 'year'
 *   },
 * });
 */
export function useHeaderQuery(baseOptions?: Apollo.QueryHookOptions<HeaderQuery, HeaderQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<HeaderQuery, HeaderQueryVariables>(HeaderDocument, options);
      }
export function useHeaderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HeaderQuery, HeaderQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<HeaderQuery, HeaderQueryVariables>(HeaderDocument, options);
        }
export type HeaderQueryHookResult = ReturnType<typeof useHeaderQuery>;
export type HeaderLazyQueryHookResult = ReturnType<typeof useHeaderLazyQuery>;
export type HeaderQueryResult = Apollo.QueryResult<HeaderQuery, HeaderQueryVariables>;
export const SearchDocument = gql`
    query Search($query: String!) {
  search(query: $query) {
    id
    title
    description
    url
    ... on ActivityResult {
      activity {
        id
        name
        type
      }
    }
    ... on PersonResult {
      person {
        id
        name
        city {
          name
          traditionalName
        }
        country {
          name
          traditionalName
        }
        picture {
          id
          small
        }
      }
    }
    ... on VenueResult {
      venue {
        id
        room
        building
        address
      }
    }
  }
}
    `;

/**
 * __useSearchQuery__
 *
 * To run a query within a React component, call `useSearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useSearchQuery(baseOptions: Apollo.QueryHookOptions<SearchQuery, SearchQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SearchQuery, SearchQueryVariables>(SearchDocument, options);
      }
export function useSearchLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchQuery, SearchQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SearchQuery, SearchQueryVariables>(SearchDocument, options);
        }
export type SearchQueryHookResult = ReturnType<typeof useSearchQuery>;
export type SearchLazyQueryHookResult = ReturnType<typeof useSearchLazyQuery>;
export type SearchQueryResult = Apollo.QueryResult<SearchQuery, SearchQueryVariables>;
export const ActivityListDocument = gql`
    query ActivityList($year: String!, $type: ActivityType) {
  festival(year: $year) {
    id
    activities(type: $type) {
      ...ActivityListActivity
    }
  }
}
    ${ActivityListActivityFragmentDoc}`;

/**
 * __useActivityListQuery__
 *
 * To run a query within a React component, call `useActivityListQuery` and pass it any options that fit your needs.
 * When your component renders, `useActivityListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useActivityListQuery({
 *   variables: {
 *      year: // value for 'year'
 *      type: // value for 'type'
 *   },
 * });
 */
export function useActivityListQuery(baseOptions: Apollo.QueryHookOptions<ActivityListQuery, ActivityListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ActivityListQuery, ActivityListQueryVariables>(ActivityListDocument, options);
      }
export function useActivityListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ActivityListQuery, ActivityListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ActivityListQuery, ActivityListQueryVariables>(ActivityListDocument, options);
        }
export type ActivityListQueryHookResult = ReturnType<typeof useActivityListQuery>;
export type ActivityListLazyQueryHookResult = ReturnType<typeof useActivityListLazyQuery>;
export type ActivityListQueryResult = Apollo.QueryResult<ActivityListQuery, ActivityListQueryVariables>;
export const ActivityDetailsDocument = gql`
    query ActivityDetails($year: String!, $type: ActivityType!, $slug: String!) {
  festival(year: $year) {
    id
    activity(type: $type, slug: $slug) {
      id
      name
      type
      slug
      description
      presenters {
        ...ActivityPresenter
      }
      slots {
        id
        startsAt
        endsAt
        venue {
          id
          room
          building
        }
      }
    }
  }
}
    ${ActivityPresenterFragmentDoc}`;

/**
 * __useActivityDetailsQuery__
 *
 * To run a query within a React component, call `useActivityDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useActivityDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useActivityDetailsQuery({
 *   variables: {
 *      year: // value for 'year'
 *      type: // value for 'type'
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useActivityDetailsQuery(baseOptions: Apollo.QueryHookOptions<ActivityDetailsQuery, ActivityDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ActivityDetailsQuery, ActivityDetailsQueryVariables>(ActivityDetailsDocument, options);
      }
export function useActivityDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ActivityDetailsQuery, ActivityDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ActivityDetailsQuery, ActivityDetailsQueryVariables>(ActivityDetailsDocument, options);
        }
export type ActivityDetailsQueryHookResult = ReturnType<typeof useActivityDetailsQuery>;
export type ActivityDetailsLazyQueryHookResult = ReturnType<typeof useActivityDetailsLazyQuery>;
export type ActivityDetailsQueryResult = Apollo.QueryResult<ActivityDetailsQuery, ActivityDetailsQueryVariables>;
export const RenameActivityDocument = gql`
    mutation RenameActivity($id: ID!, $name: String!) {
  renameActivity(id: $id, name: $name) {
    activity {
      id
      name
      type
      slug
    }
  }
}
    `;
export type RenameActivityMutationFn = Apollo.MutationFunction<RenameActivityMutation, RenameActivityMutationVariables>;

/**
 * __useRenameActivityMutation__
 *
 * To run a mutation, you first call `useRenameActivityMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRenameActivityMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [renameActivityMutation, { data, loading, error }] = useRenameActivityMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useRenameActivityMutation(baseOptions?: Apollo.MutationHookOptions<RenameActivityMutation, RenameActivityMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RenameActivityMutation, RenameActivityMutationVariables>(RenameActivityDocument, options);
      }
export type RenameActivityMutationHookResult = ReturnType<typeof useRenameActivityMutation>;
export type RenameActivityMutationResult = Apollo.MutationResult<RenameActivityMutation>;
export type RenameActivityMutationOptions = Apollo.BaseMutationOptions<RenameActivityMutation, RenameActivityMutationVariables>;
export const MoveActivityDocument = gql`
    mutation MoveActivity($id: ID!, $slug: String!) {
  moveActivity(id: $id, slug: $slug) {
    activity {
      id
      name
      type
      slug
    }
  }
}
    `;
export type MoveActivityMutationFn = Apollo.MutationFunction<MoveActivityMutation, MoveActivityMutationVariables>;

/**
 * __useMoveActivityMutation__
 *
 * To run a mutation, you first call `useMoveActivityMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMoveActivityMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [moveActivityMutation, { data, loading, error }] = useMoveActivityMutation({
 *   variables: {
 *      id: // value for 'id'
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useMoveActivityMutation(baseOptions?: Apollo.MutationHookOptions<MoveActivityMutation, MoveActivityMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MoveActivityMutation, MoveActivityMutationVariables>(MoveActivityDocument, options);
      }
export type MoveActivityMutationHookResult = ReturnType<typeof useMoveActivityMutation>;
export type MoveActivityMutationResult = Apollo.MutationResult<MoveActivityMutation>;
export type MoveActivityMutationOptions = Apollo.BaseMutationOptions<MoveActivityMutation, MoveActivityMutationVariables>;
export const UpdateActivityDocument = gql`
    mutation UpdateActivity($id: ID!, $attributes: ActivityAttributes!) {
  updateActivity(id: $id, attributes: $attributes) {
    activity {
      id
      name
      type
      slug
      description
      presenters {
        ...ActivityPresenter
      }
    }
  }
}
    ${ActivityPresenterFragmentDoc}`;
export type UpdateActivityMutationFn = Apollo.MutationFunction<UpdateActivityMutation, UpdateActivityMutationVariables>;

/**
 * __useUpdateActivityMutation__
 *
 * To run a mutation, you first call `useUpdateActivityMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateActivityMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateActivityMutation, { data, loading, error }] = useUpdateActivityMutation({
 *   variables: {
 *      id: // value for 'id'
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useUpdateActivityMutation(baseOptions?: Apollo.MutationHookOptions<UpdateActivityMutation, UpdateActivityMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateActivityMutation, UpdateActivityMutationVariables>(UpdateActivityDocument, options);
      }
export type UpdateActivityMutationHookResult = ReturnType<typeof useUpdateActivityMutation>;
export type UpdateActivityMutationResult = Apollo.MutationResult<UpdateActivityMutation>;
export type UpdateActivityMutationOptions = Apollo.BaseMutationOptions<UpdateActivityMutation, UpdateActivityMutationVariables>;
export const FestivalDocument = gql`
    query Festival($year: String!) {
  festival(year: $year) {
    id
  }
}
    `;

/**
 * __useFestivalQuery__
 *
 * To run a query within a React component, call `useFestivalQuery` and pass it any options that fit your needs.
 * When your component renders, `useFestivalQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFestivalQuery({
 *   variables: {
 *      year: // value for 'year'
 *   },
 * });
 */
export function useFestivalQuery(baseOptions: Apollo.QueryHookOptions<FestivalQuery, FestivalQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FestivalQuery, FestivalQueryVariables>(FestivalDocument, options);
      }
export function useFestivalLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FestivalQuery, FestivalQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FestivalQuery, FestivalQueryVariables>(FestivalDocument, options);
        }
export type FestivalQueryHookResult = ReturnType<typeof useFestivalQuery>;
export type FestivalLazyQueryHookResult = ReturnType<typeof useFestivalLazyQuery>;
export type FestivalQueryResult = Apollo.QueryResult<FestivalQuery, FestivalQueryVariables>;
export const CurrentFestivalDocument = gql`
    query CurrentFestival {
  festival {
    id
    startDate
    endDate
  }
}
    `;

/**
 * __useCurrentFestivalQuery__
 *
 * To run a query within a React component, call `useCurrentFestivalQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentFestivalQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentFestivalQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentFestivalQuery(baseOptions?: Apollo.QueryHookOptions<CurrentFestivalQuery, CurrentFestivalQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentFestivalQuery, CurrentFestivalQueryVariables>(CurrentFestivalDocument, options);
      }
export function useCurrentFestivalLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentFestivalQuery, CurrentFestivalQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentFestivalQuery, CurrentFestivalQueryVariables>(CurrentFestivalDocument, options);
        }
export type CurrentFestivalQueryHookResult = ReturnType<typeof useCurrentFestivalQuery>;
export type CurrentFestivalLazyQueryHookResult = ReturnType<typeof useCurrentFestivalLazyQuery>;
export type CurrentFestivalQueryResult = Apollo.QueryResult<CurrentFestivalQuery, CurrentFestivalQueryVariables>;
export const PeopleDocument = gql`
    query People {
  people {
    ...PersonDetails
  }
}
    ${PersonDetailsFragmentDoc}`;

/**
 * __usePeopleQuery__
 *
 * To run a query within a React component, call `usePeopleQuery` and pass it any options that fit your needs.
 * When your component renders, `usePeopleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePeopleQuery({
 *   variables: {
 *   },
 * });
 */
export function usePeopleQuery(baseOptions?: Apollo.QueryHookOptions<PeopleQuery, PeopleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PeopleQuery, PeopleQueryVariables>(PeopleDocument, options);
      }
export function usePeopleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PeopleQuery, PeopleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PeopleQuery, PeopleQueryVariables>(PeopleDocument, options);
        }
export type PeopleQueryHookResult = ReturnType<typeof usePeopleQuery>;
export type PeopleLazyQueryHookResult = ReturnType<typeof usePeopleLazyQuery>;
export type PeopleQueryResult = Apollo.QueryResult<PeopleQuery, PeopleQueryVariables>;
export const PersonDocument = gql`
    query Person($id: ID!) {
  person(id: $id) {
    ...PersonDetails
    bio
    user {
      ...PersonUser
      permissions
    }
  }
  permissions {
    ...PermissionDefinitionFields
    children {
      ...PermissionDefinitionFields
      children {
        ...PermissionDefinitionFields
        children {
          ...PermissionDefinitionFields
        }
      }
    }
  }
}
    ${PersonDetailsFragmentDoc}
${PersonUserFragmentDoc}
${PermissionDefinitionFieldsFragmentDoc}`;

/**
 * __usePersonQuery__
 *
 * To run a query within a React component, call `usePersonQuery` and pass it any options that fit your needs.
 * When your component renders, `usePersonQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePersonQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePersonQuery(baseOptions: Apollo.QueryHookOptions<PersonQuery, PersonQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PersonQuery, PersonQueryVariables>(PersonDocument, options);
      }
export function usePersonLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonQuery, PersonQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PersonQuery, PersonQueryVariables>(PersonDocument, options);
        }
export type PersonQueryHookResult = ReturnType<typeof usePersonQuery>;
export type PersonLazyQueryHookResult = ReturnType<typeof usePersonLazyQuery>;
export type PersonQueryResult = Apollo.QueryResult<PersonQuery, PersonQueryVariables>;
export const UpdatePersonDocument = gql`
    mutation UpdatePerson($id: ID!, $attributes: PersonAttributes!) {
  updatePerson(id: $id, attributes: $attributes) {
    profile {
      ...PersonDetails
      bio
    }
  }
}
    ${PersonDetailsFragmentDoc}`;
export type UpdatePersonMutationFn = Apollo.MutationFunction<UpdatePersonMutation, UpdatePersonMutationVariables>;

/**
 * __useUpdatePersonMutation__
 *
 * To run a mutation, you first call `useUpdatePersonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePersonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePersonMutation, { data, loading, error }] = useUpdatePersonMutation({
 *   variables: {
 *      id: // value for 'id'
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useUpdatePersonMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePersonMutation, UpdatePersonMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePersonMutation, UpdatePersonMutationVariables>(UpdatePersonDocument, options);
      }
export type UpdatePersonMutationHookResult = ReturnType<typeof useUpdatePersonMutation>;
export type UpdatePersonMutationResult = Apollo.MutationResult<UpdatePersonMutation>;
export type UpdatePersonMutationOptions = Apollo.BaseMutationOptions<UpdatePersonMutation, UpdatePersonMutationVariables>;
export const MergePeopleDocument = gql`
    mutation MergePeople($profileIds: [ID!]!, $attributes: ProfileMergeAttributes!) {
  mergePeople(profileIds: $profileIds, attributes: $attributes) {
    profile {
      ...PersonDetails
      bio
    }
  }
}
    ${PersonDetailsFragmentDoc}`;
export type MergePeopleMutationFn = Apollo.MutationFunction<MergePeopleMutation, MergePeopleMutationVariables>;

/**
 * __useMergePeopleMutation__
 *
 * To run a mutation, you first call `useMergePeopleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMergePeopleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [mergePeopleMutation, { data, loading, error }] = useMergePeopleMutation({
 *   variables: {
 *      profileIds: // value for 'profileIds'
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useMergePeopleMutation(baseOptions?: Apollo.MutationHookOptions<MergePeopleMutation, MergePeopleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MergePeopleMutation, MergePeopleMutationVariables>(MergePeopleDocument, options);
      }
export type MergePeopleMutationHookResult = ReturnType<typeof useMergePeopleMutation>;
export type MergePeopleMutationResult = Apollo.MutationResult<MergePeopleMutation>;
export type MergePeopleMutationOptions = Apollo.BaseMutationOptions<MergePeopleMutation, MergePeopleMutationVariables>;
export const UpdatePermissionsDocument = gql`
    mutation UpdatePermissions($id: ID!, $permissions: [Permission!]!) {
  updateUser(id: $id, attributes: {permissions: $permissions}) {
    user {
      id
      permissions
    }
  }
}
    `;
export type UpdatePermissionsMutationFn = Apollo.MutationFunction<UpdatePermissionsMutation, UpdatePermissionsMutationVariables>;

/**
 * __useUpdatePermissionsMutation__
 *
 * To run a mutation, you first call `useUpdatePermissionsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePermissionsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePermissionsMutation, { data, loading, error }] = useUpdatePermissionsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      permissions: // value for 'permissions'
 *   },
 * });
 */
export function useUpdatePermissionsMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePermissionsMutation, UpdatePermissionsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePermissionsMutation, UpdatePermissionsMutationVariables>(UpdatePermissionsDocument, options);
      }
export type UpdatePermissionsMutationHookResult = ReturnType<typeof useUpdatePermissionsMutation>;
export type UpdatePermissionsMutationResult = Apollo.MutationResult<UpdatePermissionsMutation>;
export type UpdatePermissionsMutationOptions = Apollo.BaseMutationOptions<UpdatePermissionsMutation, UpdatePermissionsMutationVariables>;
export const SettingsDocument = gql`
    query Settings($id: ID!) {
  user(id: $id) {
    id
    settings {
      ...SettingValueFragment
    }
  }
}
    ${SettingValueFragmentFragmentDoc}`;

/**
 * __useSettingsQuery__
 *
 * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSettingsQuery(baseOptions: Apollo.QueryHookOptions<SettingsQuery, SettingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);
      }
export function useSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SettingsQuery, SettingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);
        }
export type SettingsQueryHookResult = ReturnType<typeof useSettingsQuery>;
export type SettingsLazyQueryHookResult = ReturnType<typeof useSettingsLazyQuery>;
export type SettingsQueryResult = Apollo.QueryResult<SettingsQuery, SettingsQueryVariables>;
export const ActivitySearchDocument = gql`
    query ActivitySearch($query: String!, $activityType: ActivityType!) {
  search(query: $query, activityType: $activityType, only: [Activity]) {
    id
    title
    description
    url
    ... on ActivityResult {
      activity {
        ...TimetableActivity
      }
    }
  }
}
    ${TimetableActivityFragmentDoc}`;

/**
 * __useActivitySearchQuery__
 *
 * To run a query within a React component, call `useActivitySearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useActivitySearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useActivitySearchQuery({
 *   variables: {
 *      query: // value for 'query'
 *      activityType: // value for 'activityType'
 *   },
 * });
 */
export function useActivitySearchQuery(baseOptions: Apollo.QueryHookOptions<ActivitySearchQuery, ActivitySearchQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ActivitySearchQuery, ActivitySearchQueryVariables>(ActivitySearchDocument, options);
      }
export function useActivitySearchLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ActivitySearchQuery, ActivitySearchQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ActivitySearchQuery, ActivitySearchQueryVariables>(ActivitySearchDocument, options);
        }
export type ActivitySearchQueryHookResult = ReturnType<typeof useActivitySearchQuery>;
export type ActivitySearchLazyQueryHookResult = ReturnType<typeof useActivitySearchLazyQuery>;
export type ActivitySearchQueryResult = Apollo.QueryResult<ActivitySearchQuery, ActivitySearchQueryVariables>;
export const PersonSearchDocument = gql`
    query PersonSearch($query: String!) {
  search(query: $query, only: [Person]) {
    id
    ... on PersonResult {
      person {
        ...TimetableCast
      }
    }
  }
}
    ${TimetableCastFragmentDoc}`;

/**
 * __usePersonSearchQuery__
 *
 * To run a query within a React component, call `usePersonSearchQuery` and pass it any options that fit your needs.
 * When your component renders, `usePersonSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePersonSearchQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function usePersonSearchQuery(baseOptions: Apollo.QueryHookOptions<PersonSearchQuery, PersonSearchQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PersonSearchQuery, PersonSearchQueryVariables>(PersonSearchDocument, options);
      }
export function usePersonSearchLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonSearchQuery, PersonSearchQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PersonSearchQuery, PersonSearchQueryVariables>(PersonSearchDocument, options);
        }
export type PersonSearchQueryHookResult = ReturnType<typeof usePersonSearchQuery>;
export type PersonSearchLazyQueryHookResult = ReturnType<typeof usePersonSearchLazyQuery>;
export type PersonSearchQueryResult = Apollo.QueryResult<PersonSearchQuery, PersonSearchQueryVariables>;
export const CreateActivityDocument = gql`
    mutation CreateActivity($festivalId: ID!, $activityType: ActivityType!, $attributes: ActivityAttributes!, $slotId: ID) {
  createActivity(
    festivalId: $festivalId
    type: $activityType
    attributes: $attributes
    slotId: $slotId
  ) {
    activity {
      ...TimetableActivity
    }
    slot {
      ...TimetableSlot
    }
  }
}
    ${TimetableActivityFragmentDoc}
${TimetableSlotFragmentDoc}`;
export type CreateActivityMutationFn = Apollo.MutationFunction<CreateActivityMutation, CreateActivityMutationVariables>;

/**
 * __useCreateActivityMutation__
 *
 * To run a mutation, you first call `useCreateActivityMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateActivityMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createActivityMutation, { data, loading, error }] = useCreateActivityMutation({
 *   variables: {
 *      festivalId: // value for 'festivalId'
 *      activityType: // value for 'activityType'
 *      attributes: // value for 'attributes'
 *      slotId: // value for 'slotId'
 *   },
 * });
 */
export function useCreateActivityMutation(baseOptions?: Apollo.MutationHookOptions<CreateActivityMutation, CreateActivityMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateActivityMutation, CreateActivityMutationVariables>(CreateActivityDocument, options);
      }
export type CreateActivityMutationHookResult = ReturnType<typeof useCreateActivityMutation>;
export type CreateActivityMutationResult = Apollo.MutationResult<CreateActivityMutation>;
export type CreateActivityMutationOptions = Apollo.BaseMutationOptions<CreateActivityMutation, CreateActivityMutationVariables>;
export const TimetableDocument = gql`
    query Timetable($year: String) {
  festival(year: $year) {
    id
    startDate
    endDate
    timetable {
      id
      slots {
        ...TimetableSlot
      }
    }
    venues {
      id
      room
      building
      position
    }
  }
}
    ${TimetableSlotFragmentDoc}`;

/**
 * __useTimetableQuery__
 *
 * To run a query within a React component, call `useTimetableQuery` and pass it any options that fit your needs.
 * When your component renders, `useTimetableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTimetableQuery({
 *   variables: {
 *      year: // value for 'year'
 *   },
 * });
 */
export function useTimetableQuery(baseOptions?: Apollo.QueryHookOptions<TimetableQuery, TimetableQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TimetableQuery, TimetableQueryVariables>(TimetableDocument, options);
      }
export function useTimetableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TimetableQuery, TimetableQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TimetableQuery, TimetableQueryVariables>(TimetableDocument, options);
        }
export type TimetableQueryHookResult = ReturnType<typeof useTimetableQuery>;
export type TimetableLazyQueryHookResult = ReturnType<typeof useTimetableLazyQuery>;
export type TimetableQueryResult = Apollo.QueryResult<TimetableQuery, TimetableQueryVariables>;
export const CreateSlotsDocument = gql`
    mutation CreateSlots($attributes: MultipleSlotAttributes!) {
  createSlots(attributes: $attributes) {
    slots {
      ...TimetableSlot
    }
  }
}
    ${TimetableSlotFragmentDoc}`;
export type CreateSlotsMutationFn = Apollo.MutationFunction<CreateSlotsMutation, CreateSlotsMutationVariables>;

/**
 * __useCreateSlotsMutation__
 *
 * To run a mutation, you first call `useCreateSlotsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSlotsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSlotsMutation, { data, loading, error }] = useCreateSlotsMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useCreateSlotsMutation(baseOptions?: Apollo.MutationHookOptions<CreateSlotsMutation, CreateSlotsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSlotsMutation, CreateSlotsMutationVariables>(CreateSlotsDocument, options);
      }
export type CreateSlotsMutationHookResult = ReturnType<typeof useCreateSlotsMutation>;
export type CreateSlotsMutationResult = Apollo.MutationResult<CreateSlotsMutation>;
export type CreateSlotsMutationOptions = Apollo.BaseMutationOptions<CreateSlotsMutation, CreateSlotsMutationVariables>;
export const DestroySlotDocument = gql`
    mutation DestroySlot($id: ID!) {
  destroySlot(id: $id)
}
    `;
export type DestroySlotMutationFn = Apollo.MutationFunction<DestroySlotMutation, DestroySlotMutationVariables>;

/**
 * __useDestroySlotMutation__
 *
 * To run a mutation, you first call `useDestroySlotMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDestroySlotMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [destroySlotMutation, { data, loading, error }] = useDestroySlotMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDestroySlotMutation(baseOptions?: Apollo.MutationHookOptions<DestroySlotMutation, DestroySlotMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DestroySlotMutation, DestroySlotMutationVariables>(DestroySlotDocument, options);
      }
export type DestroySlotMutationHookResult = ReturnType<typeof useDestroySlotMutation>;
export type DestroySlotMutationResult = Apollo.MutationResult<DestroySlotMutation>;
export type DestroySlotMutationOptions = Apollo.BaseMutationOptions<DestroySlotMutation, DestroySlotMutationVariables>;
export const UpdateSlotDocument = gql`
    mutation UpdateSlot($id: ID!, $attributes: SlotAttributes!) {
  updateSlot(id: $id, attributes: $attributes) {
    slot {
      ...TimetableSlot
    }
  }
}
    ${TimetableSlotFragmentDoc}`;
export type UpdateSlotMutationFn = Apollo.MutationFunction<UpdateSlotMutation, UpdateSlotMutationVariables>;

/**
 * __useUpdateSlotMutation__
 *
 * To run a mutation, you first call `useUpdateSlotMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSlotMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSlotMutation, { data, loading, error }] = useUpdateSlotMutation({
 *   variables: {
 *      id: // value for 'id'
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useUpdateSlotMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSlotMutation, UpdateSlotMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSlotMutation, UpdateSlotMutationVariables>(UpdateSlotDocument, options);
      }
export type UpdateSlotMutationHookResult = ReturnType<typeof useUpdateSlotMutation>;
export type UpdateSlotMutationResult = Apollo.MutationResult<UpdateSlotMutation>;
export type UpdateSlotMutationOptions = Apollo.BaseMutationOptions<UpdateSlotMutation, UpdateSlotMutationVariables>;
export const CreatePersonDocument = gql`
    mutation CreatePerson($attributes: PersonAttributes!) {
  createPerson(attributes: $attributes) {
    profile {
      ...TimetableCast
    }
  }
}
    ${TimetableCastFragmentDoc}`;
export type CreatePersonMutationFn = Apollo.MutationFunction<CreatePersonMutation, CreatePersonMutationVariables>;

/**
 * __useCreatePersonMutation__
 *
 * To run a mutation, you first call `useCreatePersonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePersonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPersonMutation, { data, loading, error }] = useCreatePersonMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useCreatePersonMutation(baseOptions?: Apollo.MutationHookOptions<CreatePersonMutation, CreatePersonMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreatePersonMutation, CreatePersonMutationVariables>(CreatePersonDocument, options);
      }
export type CreatePersonMutationHookResult = ReturnType<typeof useCreatePersonMutation>;
export type CreatePersonMutationResult = Apollo.MutationResult<CreatePersonMutation>;
export type CreatePersonMutationOptions = Apollo.BaseMutationOptions<CreatePersonMutation, CreatePersonMutationVariables>;
export const TranslationsDocument = gql`
    query Translations {
  translations {
    ...TranslationDetails
  }
}
    ${TranslationDetailsFragmentDoc}`;

/**
 * __useTranslationsQuery__
 *
 * To run a query within a React component, call `useTranslationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useTranslationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTranslationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useTranslationsQuery(baseOptions?: Apollo.QueryHookOptions<TranslationsQuery, TranslationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TranslationsQuery, TranslationsQueryVariables>(TranslationsDocument, options);
      }
export function useTranslationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TranslationsQuery, TranslationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TranslationsQuery, TranslationsQueryVariables>(TranslationsDocument, options);
        }
export type TranslationsQueryHookResult = ReturnType<typeof useTranslationsQuery>;
export type TranslationsLazyQueryHookResult = ReturnType<typeof useTranslationsLazyQuery>;
export type TranslationsQueryResult = Apollo.QueryResult<TranslationsQuery, TranslationsQueryVariables>;
export const CreateTranslationDocument = gql`
    mutation CreateTranslation($name: String!, $traditionalName: String!, $country: Country!) {
  createTranslation(
    name: $name
    traditionalName: $traditionalName
    country: $country
  ) {
    translation {
      ...TranslationDetails
    }
  }
}
    ${TranslationDetailsFragmentDoc}`;
export type CreateTranslationMutationFn = Apollo.MutationFunction<CreateTranslationMutation, CreateTranslationMutationVariables>;

/**
 * __useCreateTranslationMutation__
 *
 * To run a mutation, you first call `useCreateTranslationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTranslationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTranslationMutation, { data, loading, error }] = useCreateTranslationMutation({
 *   variables: {
 *      name: // value for 'name'
 *      traditionalName: // value for 'traditionalName'
 *      country: // value for 'country'
 *   },
 * });
 */
export function useCreateTranslationMutation(baseOptions?: Apollo.MutationHookOptions<CreateTranslationMutation, CreateTranslationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateTranslationMutation, CreateTranslationMutationVariables>(CreateTranslationDocument, options);
      }
export type CreateTranslationMutationHookResult = ReturnType<typeof useCreateTranslationMutation>;
export type CreateTranslationMutationResult = Apollo.MutationResult<CreateTranslationMutation>;
export type CreateTranslationMutationOptions = Apollo.BaseMutationOptions<CreateTranslationMutation, CreateTranslationMutationVariables>;
export const UpdateTranslationDocument = gql`
    mutation UpdateTranslation($id: ID!, $name: String!, $traditionalName: String!, $country: Country!) {
  updateTranslation(
    id: $id
    name: $name
    traditionalName: $traditionalName
    country: $country
  ) {
    translation {
      ...TranslationDetails
    }
  }
}
    ${TranslationDetailsFragmentDoc}`;
export type UpdateTranslationMutationFn = Apollo.MutationFunction<UpdateTranslationMutation, UpdateTranslationMutationVariables>;

/**
 * __useUpdateTranslationMutation__
 *
 * To run a mutation, you first call `useUpdateTranslationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTranslationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTranslationMutation, { data, loading, error }] = useUpdateTranslationMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      traditionalName: // value for 'traditionalName'
 *      country: // value for 'country'
 *   },
 * });
 */
export function useUpdateTranslationMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTranslationMutation, UpdateTranslationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateTranslationMutation, UpdateTranslationMutationVariables>(UpdateTranslationDocument, options);
      }
export type UpdateTranslationMutationHookResult = ReturnType<typeof useUpdateTranslationMutation>;
export type UpdateTranslationMutationResult = Apollo.MutationResult<UpdateTranslationMutation>;
export type UpdateTranslationMutationOptions = Apollo.BaseMutationOptions<UpdateTranslationMutation, UpdateTranslationMutationVariables>;
export const DestroyTranslationDocument = gql`
    mutation DestroyTranslation($id: ID!) {
  destroyTranslation(id: $id)
}
    `;
export type DestroyTranslationMutationFn = Apollo.MutationFunction<DestroyTranslationMutation, DestroyTranslationMutationVariables>;

/**
 * __useDestroyTranslationMutation__
 *
 * To run a mutation, you first call `useDestroyTranslationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDestroyTranslationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [destroyTranslationMutation, { data, loading, error }] = useDestroyTranslationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDestroyTranslationMutation(baseOptions?: Apollo.MutationHookOptions<DestroyTranslationMutation, DestroyTranslationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DestroyTranslationMutation, DestroyTranslationMutationVariables>(DestroyTranslationDocument, options);
      }
export type DestroyTranslationMutationHookResult = ReturnType<typeof useDestroyTranslationMutation>;
export type DestroyTranslationMutationResult = Apollo.MutationResult<DestroyTranslationMutation>;
export type DestroyTranslationMutationOptions = Apollo.BaseMutationOptions<DestroyTranslationMutation, DestroyTranslationMutationVariables>;
export const RegistrationDocument = gql`
    query Registration {
  festival {
    id
    startDate
    endDate
    workshopSlots {
      id
      startsAt
      endsAt
      workshops {
        ...RegistrationWorkshop
      }
    }
  }
}
    ${RegistrationWorkshopFragmentDoc}`;

/**
 * __useRegistrationQuery__
 *
 * To run a query within a React component, call `useRegistrationQuery` and pass it any options that fit your needs.
 * When your component renders, `useRegistrationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRegistrationQuery({
 *   variables: {
 *   },
 * });
 */
export function useRegistrationQuery(baseOptions?: Apollo.QueryHookOptions<RegistrationQuery, RegistrationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RegistrationQuery, RegistrationQueryVariables>(RegistrationDocument, options);
      }
export function useRegistrationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RegistrationQuery, RegistrationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RegistrationQuery, RegistrationQueryVariables>(RegistrationDocument, options);
        }
export type RegistrationQueryHookResult = ReturnType<typeof useRegistrationQuery>;
export type RegistrationLazyQueryHookResult = ReturnType<typeof useRegistrationLazyQuery>;
export type RegistrationQueryResult = Apollo.QueryResult<RegistrationQuery, RegistrationQueryVariables>;
import { datePolicy, dateTimePolicy } from './policies/dateTimePolicy';

export const scalarTypePolicies = {
  Festival: { fields: { endDate: datePolicy, startDate: datePolicy } },
  Slot: { fields: { endsAt: dateTimePolicy, startsAt: dateTimePolicy } },
  WorkshopSlot: { fields: { endsAt: dateTimePolicy, startsAt: dateTimePolicy } },
};
